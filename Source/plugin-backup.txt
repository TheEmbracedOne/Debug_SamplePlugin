
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using GlobalEnums;
using InControl;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.SceneManagement;
using PluginManager.Plugin;

namespace SamplePlugin { 


    // Token: 0x02000950 RID: 2384
    public class onData
    {
        // Token: 0x1700045D RID: 1117
        // (get) Token: 0x0600312F RID: 12591
        // (set) Token: 0x06003130 RID: 12592
        public int HP { get; set; }

        // Token: 0x1700045E RID: 1118
        // (get) Token: 0x06003131 RID: 12593
        // (set) Token: 0x06003132 RID: 12594
        public PlayMakerFSM FSM { get; set; }

        // Token: 0x1700045F RID: 1119
        // (get) Token: 0x06003133 RID: 12595
        // (set) Token: 0x06003134 RID: 12596
        public Component Spr { get; set; }

        // Token: 0x06003135 RID: 12597
        public onData()
        {
            /*
    An exception occurred when decompiling this method (06003135)

    ICSharpCode.Decompiler.DecompilerException: Error decompiling System.Void onData::.ctor()
     ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.
    Parameter name: index
       at System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)
       at dnlib.DotNet.ParameterList.dnlib.Threading.Collections.IList<dnlib.DotNet.Parameter>.Get_NoLock(Int32 index) in C:\projects\dnspy\Libraries\dnlib\src\DotNet\ParameterList.cs:line 342
       at dnlib.DotNet.ParameterList.get_Item(Int32 index) in C:\projects\dnspy\Libraries\dnlib\src\DotNet\ParameterList.cs:line 77
       at ICSharpCode.Decompiler.ILAst.ILCodeUtil.ExpandMacro(ILCode& code, Object& operand, MethodDef method) in C:\projects\dnspy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\ILAst\ILCodes.cs:line 431
       at ICSharpCode.Decompiler.ILAst.ILAstBuilder.StackAnalysis(MethodDef methodDef) in C:\projects\dnspy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\ILAst\ILAstBuilder.cs:line 300
       at ICSharpCode.Decompiler.ILAst.ILAstBuilder.Build(MethodDef methodDef, Boolean optimize, DecompilerContext context) in C:\projects\dnspy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\ILAst\ILAstBuilder.cs:line 269
       at ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(IEnumerable`1 parameters, MethodDebugInfoBuilder& builder) in C:\projects\dnspy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\Ast\AstMethodBodyBuilder.cs:line 110
       at ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(MethodDef methodDef, DecompilerContext context, AutoPropertyProvider autoPropertyProvider, IEnumerable`1 parameters, Boolean valueParameterIsKeyword, StringBuilder sb, MethodDebugInfoBuilder& stmtsBuilder) in C:\projects\dnspy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\Ast\AstMethodBodyBuilder.cs:line 88
       --- End of inner exception stack trace ---
       at ICSharpCode.Decompiler.Ast.AstMethodBodyBuilder.CreateMethodBody(MethodDef methodDef, DecompilerContext context, AutoPropertyProvider autoPropertyProvider, IEnumerable`1 parameters, Boolean valueParameterIsKeyword, StringBuilder sb, MethodDebugInfoBuilder& stmtsBuilder) in C:\projects\dnspy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\Ast\AstMethodBodyBuilder.cs:line 92
       at ICSharpCode.Decompiler.Ast.AstBuilder.CreateMethodBody(MethodDef method, IEnumerable`1 parameters, Boolean valueParameterIsKeyword, MethodKind methodKind, MethodDebugInfoBuilder& builder) in C:\projects\dnspy\Extensions\ILSpy.Decompiler\ICSharpCode.Decompiler\ICSharpCode.Decompiler\Ast\AstBuilder.cs:line 1426
    */
            ;
        }
    }

    [OnGameInit]

    // Token: 0x02000951 RID: 2385
    public class OnScreenA : MonoBehaviour
    {
        // Token: 0x06003136 RID: 12598
        public void Awake()
        {
            if (this.consoleHist == null)
            {
                this.consoleHist = new List<string>();
            }
            this.addLine("New session started " + DateTime.Now.ToString());
            if (this.enemyPool == null)
            {
                this.enemyPool = new Dictionary<GameObject, onData>();
            }
            this.enemyPool.Clear();
            if (this.DGData == null)
            {
                this.DGData = new Dictionary<string, KeyValuePair<string, float[]>>();
            }
            if (this.tempEData == null)
            {
                this.tempEData = new List<GameObject>();
            }
            if (this.backgroundTexture == null)
            {
                this.backgroundTexture = new Texture2D(1, 1);
                this.backgroundTexture.SetPixel(0, 0, Color.white);
                this.backgroundTexture.Apply();
            }
            if (this.textureStyle == null)
            {
                this.textureStyle = new GUIStyle();
                this.textureStyle.normal.background = this.backgroundTexture;
            }
            this.modVersion = "1.2.0.2";
            this.DGentry = "Entry name";
            this.showAll = true;
            this.showHelp = true;
            this.showPanelState = 6;
            this.hazardLocation = PlayerData.instance.hazardRespawnLocation;
            this.respawnSceneWatch = PlayerData.instance.respawnScene;
            this.setMatrix();
            this.bossList();
            this.readDGdata(false);
            if (this.copyList == null || this.fileList == null)
            {
                this.populateList();
            }
        }

        // Token: 0x06003137 RID: 12599
        public void Start()
        {
            this.gm = GameManager.instance;
            this.ih = this.gm.inputHandler;
            GUI.depth = 2;
            this.gm.UnloadingLevel += this.OnLevelUnload;
        }

        // Token: 0x06003138 RID: 12600
        public void LevelActivated(Scene sceneFrom, Scene sceneTo)
        {
            if ((string.IsNullOrEmpty(sceneFrom.name) || sceneFrom.name == "Menu_Title") && this.gm.IsGameplayScene())
            {
                this.goReference();
            }
            if (this.gm.IsGameplayScene())
            {
                this.loadTime = (float)Math.Round((double)(Time.realtimeSinceStartup - this.unloadTime), 2);
                this.addLine("New scene loaded: " + sceneTo.name);
                this.enemyPool.Clear();
                this.enemyCheck = false;
                this.deathWatchdog = false;
                this.bossFound = false;
                this.ghostFound = false;
                if (this.bossData != null && this.bossData.ContainsKey(sceneTo.name))
                {
                    this.addLine("Found stored Boss in this scene, respawn available");
                    this.bossFound = true;
                }
                if (this.ghostData != null && this.ghostData.ContainsKey(sceneTo.name))
                {
                    this.addLine("Found stored Ghost Boss in this scene, respawn available");
                    this.ghostFound = true;
                }
            }
            if (PlayerData.instance != null && PlayerData.instance.atBench)
            {
                TimeSpan timeSpan = TimeSpan.FromSeconds((double)PlayerData.instance.playTime);
                string text = string.Format("{0:00}.{1:00}", Math.Floor(timeSpan.TotalHours), timeSpan.Minutes);
                int profileID = PlayerData.instance.profileID;
                string saveFilename = GameManager.instance.GetSaveFilename(profileID);
                DateTime lastWriteTime = File.GetLastWriteTime(Application.persistentDataPath + saveFilename);
                this.addLine(string.Concat(new string[]
                {
                "New savegame loaded. Profile playtime ",
                text,
                "  Completion: ",
                PlayerData.instance.completionPercentage.ToString(),
                "  Save slot: ",
                profileID.ToString(),
                "  Game Version: ",
                PlayerData.instance.version.ToString(),
                "  Last written: ",
                lastWriteTime.ToString()
                }));
            }
        }

        // Token: 0x06003139 RID: 12601
        public void OnEnable()
        {
            this.gm = GameManager.instance;
            this.ih = this.gm.inputHandler;
            GUI.depth = 2;
            this.gm.UnloadingLevel += this.OnLevelUnload;
        }

        // Token: 0x0600313A RID: 12602
        public void OnDisable()
        {
            UnityEngine.SceneManagement.SceneManager.activeSceneChanged -= this.LevelActivated;
            if (this.gm != null)
            {
                this.gm.UnloadingLevel -= this.OnLevelUnload;
            }
        }

        // Token: 0x0600313B RID: 12603
        public void OnGUI()
        {
            Matrix4x4 matrix = GUI.matrix;
            GUI.matrix = Matrix4x4.TRS(Vector3.zero, Quaternion.identity, this.scale);
            GUI.backgroundColor = Color.white;
            GUI.contentColor = Color.white;
            GUI.color = Color.white;
            GUI.skin.label.alignment = TextAnchor.UpperLeft;
            if (GameManager.instance.sceneName == "Menu_Title")
            {
                GUI.skin.label.fontStyle = FontStyle.Normal;
                GUI.skin.label.fontSize = 14;
                GUI.Label(new Rect(10f, 0f, 400f, 300f), "DebugMod\nby KZ | The Embraced One");
            }
            if (this.showAll)
            {
                GUI.skin.button.fontStyle = FontStyle.Bold;
                if ((this.showPanel && GameManager.instance.IsGameplayScene() && UIManager.instance.uiState == UIState.PLAYING) || (GameManager.instance.IsGameplayScene() && !this.showHelp && UIManager.instance.uiState == UIState.PAUSED))
                {
                    GUI.skin.label.alignment = TextAnchor.UpperLeft;
                    GUI.skin.label.fontStyle = FontStyle.Bold;
                    GUI.skin.label.fontSize = 18;
                    if (this.showPanelState >= 1)
                    {
                        int num = Mathf.FloorToInt(Time.realtimeSinceStartup / 60f);
                        int num2 = Mathf.FloorToInt(Time.realtimeSinceStartup - (float)(num * 60));
                        Vector3 position = this.refKnight.transform.position;
                        GUI.Label(new Rect(10f, 10f, 200f, 25f), "Session  time: " + string.Format("{0:00}:{1:00}", num, num2));
                        GUI.Label(new Rect(10f, 35f, 300f, 25f), "Hero position: " + position.ToString());
                        GUI.Label(new Rect(1720f, 10f, 300f, 120f), this.ReadInput());
                        GUI.Label(new Rect(910f, 5f, 100f, 25f), "Load: " + this.loadTime + "s");
                    }
                    GUILayout.BeginArea(new Rect(7f, 210f, 500f, 790f));
                    GUILayout.BeginVertical("box", new GUILayoutOption[0]);
                    if (this.showPanelState >= 0 && this.showPanelState < 2)
                    {
                        GUILayout.Label("CTRL+F2 TO CYCLE BETWEEN TABS", new GUILayoutOption[]
                        {
                        GUILayout.ExpandHeight(true)
                        });
                    }
                    if (this.showPanelState >= 2)
                    {
                        ActorStates hero_state = HeroController.instance.hero_state;
                        int health = PlayerData.instance.health;
                        int mpcharge = PlayerData.instance.MPCharge;
                        int maxHealth = PlayerData.instance.maxHealth;
                        int maxHealthBase = PlayerData.instance.maxHealthBase;
                        int nailDamage = PlayerData.instance.nailDamage;
                        bool acceptingInput = HeroController.instance.acceptingInput;
                        Vector2 current_velocity = HeroController.instance.current_velocity;
                        bool controlReqlinquished = HeroController.instance.controlReqlinquished;
                        bool atBench = PlayerData.instance.atBench;
                        int value = this.refKnightSlash.FsmVariables.GetFsmInt("damageDealt").Value;
                        float value2 = this.refKnightSlash.FsmVariables.GetFsmFloat("Multiplier").Value;
                        GUILayout.Label(string.Concat(new object[]
                        {
                        "HERO STATE: ",
                        hero_state,
                        Environment.NewLine,
                        "HP: ",
                        health,
                        "  |  MP: ",
                        mpcharge,
                        "  |  Max HP: ",
                        maxHealth,
                        "  |  MAXBASE: ",
                        maxHealthBase,
                        Environment.NewLine,
                        "NAILDMG: ",
                        nailDamage,
                        "  |  OUTPUTFLAT : ",
                        value,
                        "  |  xMULT. : ",
                        value2,
                        Environment.NewLine,
                        "VELOCITY: ",
                        current_velocity,
                        Environment.NewLine,
                        "ACCEPT INPUT: ",
                        acceptingInput,
                        Environment.NewLine,
                        "RELINQUISHED: ",
                        controlReqlinquished,
                        "  |  atBENCH: ",
                        atBench
                        }), new GUILayoutOption[]
                        {
                        GUILayout.ExpandHeight(true)
                        });
                    }
                    if (this.showPanelState >= 3)
                    {
                        bool dashing = HeroController.instance.cState.dashing;
                        bool jumping = HeroController.instance.cState.jumping;
                        bool doubleJumping = HeroController.instance.cState.doubleJumping;
                        bool superDashing = HeroController.instance.cState.superDashing;
                        bool onGround = HeroController.instance.cState.onGround;
                        bool falling = HeroController.instance.cState.falling;
                        bool willHardLand = HeroController.instance.cState.willHardLand;
                        bool swimming = HeroController.instance.cState.swimming;
                        bool recoiling = HeroController.instance.cState.recoiling;
                        GUILayout.Label(string.Concat(new object[]
                        {
                        "DASHING: ",
                        dashing,
                        Environment.NewLine,
                        "JUMPING: ",
                        jumping,
                        Environment.NewLine,
                        "DOUBLE-JUMPING: ",
                        doubleJumping,
                        Environment.NewLine,
                        "SUPERDASHING: ",
                        superDashing,
                        Environment.NewLine,
                        "ON GROUND: ",
                        onGround,
                        Environment.NewLine,
                        "FALLING: ",
                        falling,
                        "  |   HARDLAND: ",
                        willHardLand,
                        Environment.NewLine,
                        "SWIMMING: ",
                        swimming,
                        Environment.NewLine,
                        "RECOILING: ",
                        recoiling
                        }), new GUILayoutOption[]
                        {
                        GUILayout.ExpandHeight(true)
                        });
                    }
                    if (this.showPanelState >= 4)
                    {
                        bool touchingWall = HeroController.instance.cState.touchingWall;
                        bool wallLocked = HeroController.instance.wallLocked;
                        bool wallJumping = HeroController.instance.cState.wallJumping;
                        bool wallSliding = HeroController.instance.cState.wallSliding;
                        bool touchingWallL = HeroController.instance.touchingWallL;
                        bool touchingWallR = HeroController.instance.touchingWallR;
                        bool attacking = HeroController.instance.cState.attacking;
                        bool flag = HeroController.instance.CanCast();
                        bool flag2 = HeroController.instance.CanSuperDash();
                        bool flag3 = HeroController.instance.CanOpenInventory();
                        bool flag4 = HeroController.instance.CanQuickMap();
                        bool value3 = this.refDreamNail.FsmVariables.GetFsmBool("Dream Warp Allowed").Value;
                        bool value4 = this.refDreamNail.FsmVariables.GetFsmBool("Can Dream Gate").Value;
                        bool value5 = this.refDreamNail.FsmVariables.GetFsmBool("Dream Gate Allowed").Value;
                        GUILayout.Label(string.Concat(new object[]
                        {
                        "WALL-LOCK: ",
                        wallLocked,
                        "  |  WALL-JUMPING: ",
                        wallJumping,
                        Environment.NewLine,
                        "WALL TOUCHING: ",
                        touchingWall,
                        Environment.NewLine,
                        "WALL SLIDING: ",
                        wallSliding,
                        Environment.NewLine,
                        "WALL_L: ",
                        touchingWallL,
                        "  |  WALL_R: ",
                        touchingWallR,
                        Environment.NewLine,
                        "ATTACKING: ",
                        attacking,
                        Environment.NewLine,
                        "canCAST: ",
                        flag,
                        "  |  canSUPERDASH: ",
                        flag2,
                        Environment.NewLine,
                        "canQUICKMAP: ",
                        flag3,
                        "  |  canINVENTR: ",
                        flag4,
                        Environment.NewLine,
                        "canWARP: ",
                        value3,
                        "  |  canGATE: ",
                        value4,
                        "  |  gateAllow: ",
                        value5
                        }), new GUILayoutOption[]
                        {
                        GUILayout.ExpandHeight(true)
                        });
                    }
                    if (this.showPanelState >= 5)
                    {
                        bool invulnerable = HeroController.instance.cState.invulnerable;
                        bool isInvincible = PlayerData.instance.isInvincible;
                        bool invinciTest = PlayerData.instance.invinciTest;
                        DamageMode damageMode = HeroController.instance.damageMode;
                        bool dead = HeroController.instance.cState.dead;
                        bool hazardDeath = HeroController.instance.cState.hazardDeath;
                        GUILayout.Label(string.Concat(new object[]
                        {
                        "isINVULNERABLE: ",
                        invulnerable,
                        Environment.NewLine,
                        "INVINCIBLE: ",
                        isInvincible,
                        "  |  INVINCITEST: ",
                        invinciTest,
                        Environment.NewLine,
                        "DAMAGE STATE: ",
                        damageMode,
                        Environment.NewLine,
                        "DEAD STATE: ",
                        dead,
                        Environment.NewLine,
                        "HAZARD DEATH: ",
                        hazardDeath
                        }), new GUILayoutOption[]
                        {
                        GUILayout.ExpandHeight(true)
                        });
                    }
                    if (this.showPanelState >= 6 && !this.bossSub)
                    {
                        string sceneName = this.gm.sceneName;
                        bool flag5 = this.gm.IsGameplayScene();
                        bool transitioning = HeroController.instance.cState.transitioning;
                        HeroTransitionState transitionState = HeroController.instance.transitionState;
                        bool isPaused = HeroController.instance.cState.isPaused;
                        float completionPercentage = PlayerData.instance.completionPercentage;
                        int grubsCollected = PlayerData.instance.grubsCollected;
                        GameState gameState = GameManager.instance.gameState;
                        UIState uiState = UIManager.instance.uiState;
                        CameraController.CameraMode mode = this.refCamera.mode;
                        GUILayout.Label(string.Concat(new object[]
                        {
                        "SCENE NAME: ",
                        sceneName,
                        Environment.NewLine,
                        "TRANSITION: ",
                        transitioning,
                        "  |  isGAMEPLAY: ",
                        flag5,
                        Environment.NewLine,
                        "TRANSITION STATE: ",
                        transitionState,
                        Environment.NewLine,
                        "GAME STATE: ",
                        gameState,
                        Environment.NewLine,
                        "UI STATE: ",
                        uiState,
                        "  |  HERO PAUSED: ",
                        isPaused,
                        Environment.NewLine,
                        "CAMERA MODE: ",
                        mode,
                        Environment.NewLine,
                        "PERCENTAGE: ",
                        completionPercentage,
                        "  |  GRUBS: ",
                        grubsCollected
                        }), new GUILayoutOption[]
                        {
                        GUILayout.ExpandHeight(true)
                        });
                    }
                    GUILayout.EndVertical();
                    GUILayout.FlexibleSpace();
                    GUILayout.EndArea();
                }
                if ((this.showButtons && GameManager.instance.IsGameplayScene() && UIManager.instance.uiState == UIState.PLAYING) || (GameManager.instance.IsGameplayScene() && UIManager.instance.uiState == UIState.PAUSED))
                {
                    TextAnchor alignment = GUI.skin.button.alignment;
                    int fontSize = GUI.skin.toggle.fontSize;
                    FontStyle fontStyle = GUI.skin.toggle.fontStyle;
                    int fontSize2 = GUI.skin.button.fontSize;
                    FontStyle fontStyle2 = GUI.skin.button.fontStyle;
                    GUI.skin.button.alignment = TextAnchor.MiddleCenter;
                    GUI.skin.button.fontSize = 18;
                    GUI.skin.button.fontStyle = FontStyle.Bold;
                    GUI.skin.toggle.fontSize = 18;
                    GUI.skin.toggle.fontStyle = FontStyle.Bold;
                    GUILayout.BeginArea(new Rect(10f, 1005f, 1090f, 70f));
                    GUILayout.BeginHorizontal("", new GUILayoutOption[0]);
                    if (GUILayout.Button("HIDE MENU", new GUILayoutOption[]
                    {
                    GUILayout.Height(30f),
                    GUILayout.Width(150f)
                    }))
                    {
                        this.showAll = false;
                    }
                    if (GUILayout.Button("KILL ALL", new GUILayoutOption[]
                    {
                    GUILayout.Height(30f),
                    GUILayout.Width(150f)
                    }))
                    {
                        PlayMakerFSM.BroadcastEvent("INSTA KILL");
                        this.addLine("INSTA KILL broadcasted!");
                    }
                    Color backgroundColor = GUI.backgroundColor;
                    if (this.bossSub)
                    {
                        GUI.backgroundColor = Color.green;
                    }
                    this.bossSub = GUILayout.Toggle(this.bossSub, "BOSSES", "Button", new GUILayoutOption[]
                    {
                    GUILayout.Height(30f),
                    GUILayout.Width(150f)
                    });
                    GUI.backgroundColor = backgroundColor;
                    if (this.charmSub)
                    {
                        GUI.backgroundColor = Color.green;
                    }
                    this.charmSub = GUILayout.Toggle(this.charmSub, "CHARMS", "Button", new GUILayoutOption[]
                    {
                    GUILayout.Height(30f),
                    GUILayout.Width(150f)
                    });
                    GUI.backgroundColor = backgroundColor;
                    if (this.skillSub)
                    {
                        GUI.backgroundColor = Color.green;
                    }
                    this.skillSub = GUILayout.Toggle(this.skillSub, "SKILLS", "Button", new GUILayoutOption[]
                    {
                    GUILayout.Height(30f),
                    GUILayout.Width(150f)
                    });
                    GUI.backgroundColor = backgroundColor;
                    if (this.itemSub)
                    {
                        GUI.backgroundColor = Color.green;
                    }
                    this.itemSub = GUILayout.Toggle(this.itemSub, "ITEMS", "Button", new GUILayoutOption[]
                    {
                    GUILayout.Height(30f),
                    GUILayout.Width(150f)
                    });
                    GUI.backgroundColor = backgroundColor;
                    if (this.DGsub)
                    {
                        GUI.backgroundColor = Color.green;
                    }
                    this.DGsub = GUILayout.Toggle(this.DGsub, "DREAMGATE", "Button", new GUILayoutOption[]
                    {
                    GUILayout.Height(30f),
                    GUILayout.Width(150f)
                    });
                    GUI.backgroundColor = backgroundColor;
                    GUILayout.EndHorizontal();
                    GUILayout.BeginHorizontal("", new GUILayoutOption[0]);
                    if (GUILayout.Button("INFINIJUMP", new GUILayoutOption[]
                    {
                    GUILayout.Height(30f),
                    GUILayout.Width(150f)
                    }))
                    {
                        PlayerData.instance.infiniteAirJump = !PlayerData.instance.infiniteAirJump;
                        this.addLine("Infinite Jump set to " + PlayerData.instance.infiniteAirJump.ToString().ToUpper());
                    }
                    if (GUILayout.Button("INFINISOUL", new GUILayoutOption[]
                    {
                    GUILayout.Height(30f),
                    GUILayout.Width(150f)
                    }))
                    {
                        this.infiniSOUL = !this.infiniSOUL;
                        this.addLine("Infinite SOUL set to " + this.infiniSOUL.ToString().ToUpper());
                    }
                    if (GUILayout.Button("INFINITE HP", new GUILayoutOption[]
                    {
                    GUILayout.Height(30f),
                    GUILayout.Width(150f)
                    }))
                    {
                        this.infiniteHP = !this.infiniteHP;
                        this.addLine("Infinite HP set to " + this.infiniteHP.ToString().ToUpper());
                    }
                    if (GUILayout.Button("INVINCIBLE", new GUILayoutOption[]
                    {
                    GUILayout.Height(30f),
                    GUILayout.Width(150f)
                    }))
                    {
                        PlayerData.instance.isInvincible = !PlayerData.instance.isInvincible;
                        this.addLine("Invincibility set to " + PlayerData.instance.isInvincible.ToString().ToUpper());
                    }
                    if (GUILayout.Button("SET RESPAWN", new GUILayoutOption[]
                    {
                    GUILayout.Height(30f),
                    GUILayout.Width(150f)
                    }))
                    {
                        this.manualRespawn = this.refKnight.transform.position;
                        HeroController.instance.SetHazardRespawn(this.manualRespawn, false);
                    }
                    if (GUILayout.Button("DUMP LOG", new GUILayoutOption[]
                    {
                    GUILayout.Height(30f),
                    GUILayout.Width(150f)
                    }))
                    {
                        this.addLine("Saving console log...");
                        try
                        {
                            File.WriteAllLines("console.txt", this.consoleHist.ToArray());
                        }
                        catch (Exception arg)
                        {
                            Debug.LogError("[CUSTOMBENCH]: Unable to write custom savefile: " + arg);
                        }
                    }
                    if (GUILayout.Button("RESPAWN", new GUILayoutOption[]
                    {
                    GUILayout.Height(30f),
                    GUILayout.Width(150f)
                    }))
                    {
                        this.addLine("Trying to respawn Hero...");
                        this.Respawn();
                    }
                    GUILayout.EndHorizontal();
                    GUILayout.EndArea();
                    TextAnchor alignment2 = GUI.skin.label.alignment;
                    GUI.skin.label.alignment = TextAnchor.MiddleLeft;
                    if (this.infiniSOUL)
                    {
                        GUI.Label(new Rect(167f, 1045f, 30f, 30f), "<color=lime>✔</color>");
                    }
                    if (PlayerData.instance.infiniteAirJump)
                    {
                        GUI.Label(new Rect(12f, 1045f, 30f, 30f), "<color=lime>✔</color>");
                    }
                    if (this.infiniteHP)
                    {
                        GUI.Label(new Rect(322f, 1045f, 30f, 30f), "<color=lime>✔</color>");
                    }
                    if (PlayerData.instance.isInvincible)
                    {
                        GUI.Label(new Rect(477f, 1045f, 30f, 30f), "<color=lime>✔</color>");
                    }
                    GUI.skin.button.alignment = alignment;
                    GUI.skin.label.alignment = alignment2;
                    GUI.skin.toggle.fontSize = fontSize;
                    GUI.skin.toggle.fontStyle = fontStyle;
                    GUI.skin.button.fontSize = fontSize2;
                    GUI.skin.button.fontStyle = fontStyle2;
                    int fontSize3 = GUI.skin.toggle.fontSize;
                    FontStyle fontStyle3 = GUI.skin.toggle.fontStyle;
                    GUI.skin.toggle.fontSize = 18;
                    GUI.skin.toggle.fontStyle = FontStyle.Bold;
                    if (this.skillSub)
                    {
                        TextAnchor alignment3 = GUI.skin.button.alignment;
                        int fontSize4 = GUI.skin.button.fontSize;
                        Color contentColor = GUI.contentColor;
                        Color backgroundColor2 = GUI.backgroundColor;
                        GUI.skin.button.fontSize = 18;
                        GUI.skin.button.alignment = TextAnchor.MiddleLeft;
                        GUI.contentColor = Color.white;
                        GUI.backgroundColor = Color.white;
                        GUILayout.BeginArea(new Rect(630f, 0f, 150f, 1005f));
                        GUILayout.FlexibleSpace();
                        GUILayout.BeginVertical("box", new GUILayoutOption[0]);
                        if (GUILayout.Button("ALL SKILLS", new GUILayoutOption[]
                        {
                        GUILayout.Height(20f)
                        }))
                        {
                            PlayerData.instance.hasSpell = true;
                            PlayerData.instance.fireballLevel = 2;
                            PlayerData.instance.quakeLevel = 2;
                            PlayerData.instance.screamLevel = 2;
                            PlayerData.instance.hasNailArt = true;
                            PlayerData.instance.hasCyclone = true;
                            PlayerData.instance.hasDashSlash = true;
                            PlayerData.instance.hasUpwardSlash = true;
                            PlayerData.instance.hasAllNailArts = true;
                            PlayerData.instance.hasDreamNail = true;
                            PlayerData.instance.dreamNailUpgraded = true;
                            PlayerData.instance.hasDash = true;
                            PlayerData.instance.canDash = true;
                            PlayerData.instance.hasWalljump = true;
                            PlayerData.instance.hasSuperDash = true;
                            PlayerData.instance.hasShadowDash = true;
                            PlayerData.instance.hasAcidArmour = true;
                            PlayerData.instance.hasDoubleJump = true;
                            this.addLine("All SKILLs and SPELLs are activated");
                        }
                        if (GUILayout.Button("Scream lvl: " + PlayerData.instance.screamLevel.ToString(), new GUILayoutOption[]
                        {
                        GUILayout.Height(20f)
                        }))
                        {
                            if (PlayerData.instance.screamLevel >= 2)
                            {
                                PlayerData.instance.screamLevel = 0;
                            }
                            else
                            {
                                PlayerData.instance.screamLevel++;
                            }
                        }
                        if (GUILayout.Button("Firebll lvl: " + PlayerData.instance.fireballLevel.ToString(), new GUILayoutOption[]
                        {
                        GUILayout.Height(20f)
                        }))
                        {
                            if (PlayerData.instance.fireballLevel >= 2)
                            {
                                PlayerData.instance.fireballLevel = 0;
                            }
                            else
                            {
                                PlayerData.instance.fireballLevel++;
                            }
                        }
                        if (GUILayout.Button("Quake lvl: " + PlayerData.instance.quakeLevel.ToString(), new GUILayoutOption[]
                        {
                        GUILayout.Height(20f)
                        }))
                        {
                            if (PlayerData.instance.quakeLevel >= 2)
                            {
                                PlayerData.instance.quakeLevel = 0;
                            }
                            else
                            {
                                PlayerData.instance.quakeLevel++;
                            }
                        }
                        GUI.backgroundColor = Color.green;
                        PlayerData.instance.hasAcidArmour = GUILayout.Toggle(PlayerData.instance.hasAcidArmour, "Isma's Tear", new GUILayoutOption[0]);
                        PlayerData.instance.hasDoubleJump = GUILayout.Toggle(PlayerData.instance.hasDoubleJump, "Double Jump", new GUILayoutOption[0]);
                        PlayerData.instance.hasShadowDash = GUILayout.Toggle(PlayerData.instance.hasShadowDash, "Shadow Dash", new GUILayoutOption[0]);
                        PlayerData.instance.hasSuperDash = GUILayout.Toggle(PlayerData.instance.hasSuperDash, "Super  Dash", new GUILayoutOption[0]);
                        PlayerData.instance.hasWalljump = GUILayout.Toggle(PlayerData.instance.hasWalljump, "Wall  Jump", new GUILayoutOption[0]);
                        PlayerData.instance.hasDash = GUILayout.Toggle(PlayerData.instance.hasDash, "Has  Dash", new GUILayoutOption[0]);
                        PlayerData.instance.canDash = GUILayout.Toggle(PlayerData.instance.canDash, "Can  Dash", new GUILayoutOption[0]);
                        PlayerData.instance.hasDreamNail = GUILayout.Toggle(PlayerData.instance.hasDreamNail, "Dream Nail", new GUILayoutOption[0]);
                        PlayerData.instance.dreamNailUpgraded = GUILayout.Toggle(PlayerData.instance.dreamNailUpgraded, "Dream Nail2", new GUILayoutOption[0]);
                        PlayerData.instance.hasDreamGate = GUILayout.Toggle(PlayerData.instance.hasDreamGate, "Dream Gate", new GUILayoutOption[0]);
                        PlayerData.instance.hasNailArt = GUILayout.Toggle(PlayerData.instance.hasNailArt, "Enable Arts", new GUILayoutOption[0]);
                        PlayerData.instance.hasCyclone = GUILayout.Toggle(PlayerData.instance.hasCyclone, "Cyclone Slash", new GUILayoutOption[0]);
                        PlayerData.instance.hasDashSlash = GUILayout.Toggle(PlayerData.instance.hasDashSlash, "Charge Slash", new GUILayoutOption[0]);
                        PlayerData.instance.hasUpwardSlash = GUILayout.Toggle(PlayerData.instance.hasUpwardSlash, "Dash Slash", new GUILayoutOption[0]);
                        GUILayout.EndVertical();
                        GUILayout.EndArea();
                        GUI.skin.button.alignment = alignment3;
                        GUI.contentColor = contentColor;
                        GUI.backgroundColor = backgroundColor2;
                        GUI.skin.button.fontSize = fontSize4;
                    }
                    if (this.charmSub)
                    {
                        TextAnchor alignment4 = GUI.skin.button.alignment;
                        int fontSize5 = GUI.skin.button.fontSize;
                        Color contentColor2 = GUI.contentColor;
                        Color backgroundColor3 = GUI.backgroundColor;
                        GUI.skin.button.alignment = TextAnchor.MiddleLeft;
                        GUI.skin.button.fontSize = 18;
                        GUI.contentColor = Color.white;
                        GUI.backgroundColor = Color.white;
                        GUILayout.BeginArea(new Rect(475f, 0f, 150f, 1005f));
                        GUILayout.FlexibleSpace();
                        GUILayout.BeginVertical("box", new GUILayoutOption[0]);
                        if (GUILayout.Button("ALL CHARMS", new GUILayoutOption[]
                        {
                        GUILayout.Height(20f)
                        }))
                        {
                            for (int i = 1; i < 37; i++)
                            {
                                PlayerData.instance.GetType().GetField("gotCharm_" + i.ToString()).SetValue(PlayerData.instance, true);
                            }
                            PlayerData.instance.charmSlots = 10;
                            PlayerData.instance.hasCharm = true;
                            PlayerData.instance.charmsOwned = 36;
                            PlayerData.instance.royalCharmState = 4;
                            PlayerData.instance.notchShroomOgres = true;
                            PlayerData.instance.notchFogCanyon = true;
                            PlayerData.instance.salubraNotch1 = true;
                            PlayerData.instance.salubraNotch2 = true;
                            PlayerData.instance.salubraNotch3 = true;
                            PlayerData.instance.salubraNotch4 = true;
                            this.addLine("Added all charms to inventory");
                        }
                        if (GUILayout.Button("Notches: " + PlayerData.instance.charmSlots.ToString(), new GUILayoutOption[]
                        {
                        GUILayout.Height(20f)
                        }))
                        {
                            if (PlayerData.instance.charmSlots >= 10)
                            {
                                PlayerData.instance.charmSlots = 1;
                            }
                            else
                            {
                                PlayerData.instance.charmSlots++;
                            }
                        }
                        if (GUILayout.Button("Kingsoul: " + PlayerData.instance.royalCharmState.ToString(), new GUILayoutOption[]
                        {
                        GUILayout.Height(20f)
                        }))
                        {
                            if (PlayerData.instance.royalCharmState >= 4)
                            {
                                PlayerData.instance.royalCharmState = 0;
                            }
                            else
                            {
                                PlayerData.instance.royalCharmState++;
                            }
                        }
                        GUI.backgroundColor = Color.green;
                        PlayerData.instance.brokenCharm_23 = GUILayout.Toggle(PlayerData.instance.brokenCharm_23, "fHrt broken?", new GUILayoutOption[0]);
                        PlayerData.instance.brokenCharm_24 = GUILayout.Toggle(PlayerData.instance.brokenCharm_24, "fGrd broken?", new GUILayoutOption[0]);
                        PlayerData.instance.brokenCharm_25 = GUILayout.Toggle(PlayerData.instance.brokenCharm_25, "fStr broken?", new GUILayoutOption[0]);
                        GUILayout.EndVertical();
                        GUILayout.EndArea();
                        GUI.skin.button.alignment = alignment4;
                        GUI.contentColor = contentColor2;
                        GUI.backgroundColor = backgroundColor3;
                        GUI.skin.button.fontSize = fontSize5;
                    }
                    if (this.itemSub)
                    {
                        TextAnchor alignment5 = GUI.skin.button.alignment;
                        int fontSize6 = GUI.skin.button.fontSize;
                        Color contentColor3 = GUI.contentColor;
                        Color backgroundColor4 = GUI.backgroundColor;
                        GUI.skin.button.alignment = TextAnchor.MiddleLeft;
                        GUI.skin.button.fontSize = 18;
                        GUI.contentColor = Color.white;
                        GUI.backgroundColor = Color.white;
                        GUILayout.BeginArea(new Rect(785f, 0f, 150f, 1005f));
                        GUILayout.FlexibleSpace();
                        GUILayout.BeginVertical("box", new GUILayoutOption[0]);
                        if (GUILayout.Button("Pale Ore: " + PlayerData.instance.ore.ToString(), new GUILayoutOption[]
                        {
                        GUILayout.Height(20f)
                        }))
                        {
                            if (PlayerData.instance.ore >= 6)
                            {
                                PlayerData.instance.ore = 0;
                            }
                            else
                            {
                                PlayerData.instance.ore++;
                            }
                        }
                        if (GUILayout.Button("SimpleKeys: " + PlayerData.instance.simpleKeys.ToString(), new GUILayoutOption[]
                        {
                        GUILayout.Height(20f)
                        }))
                        {
                            if (PlayerData.instance.simpleKeys >= 3)
                            {
                                PlayerData.instance.simpleKeys = 0;
                            }
                            else
                            {
                                PlayerData.instance.simpleKeys++;
                            }
                        }
                        if (GUILayout.Button("Eggs: " + PlayerData.instance.rancidEggs.ToString(), new GUILayoutOption[]
                        {
                        GUILayout.Height(20f)
                        }))
                        {
                            if (PlayerData.instance.rancidEggs >= 25)
                            {
                                PlayerData.instance.rancidEggs = 0;
                            }
                            else
                            {
                                PlayerData.instance.rancidEggs++;
                            }
                        }
                        if (GUILayout.Button("Essence: " + PlayerData.instance.dreamOrbs.ToString(), new GUILayoutOption[]
                        {
                        GUILayout.Height(20f)
                        }))
                        {
                            if (PlayerData.instance.dreamOrbs < 4000)
                            {
                                PlayerData.instance.dreamOrbs += 100;
                            }
                            else if (PlayerData.instance.dreamOrbs + 100 > 4000)
                            {
                                PlayerData.instance.dreamOrbs = 0;
                            }
                        }
                        if (GUILayout.Button("Geo: " + PlayerData.instance.geo.ToString(), new GUILayoutOption[]
                        {
                        GUILayout.Height(20f)
                        }) && PlayerData.instance.geo + 500 <= 99999)
                        {
                            PlayerData.instance.AddGeo(500);
                            HeroController.instance.geoCounter.AddGeo(500);
                        }
                        GUI.backgroundColor = Color.green;
                        PlayerData.instance.hasLantern = GUILayout.Toggle(PlayerData.instance.hasLantern, "Lantern", new GUILayoutOption[0]);
                        PlayerData.instance.hasTramPass = GUILayout.Toggle(PlayerData.instance.hasTramPass, "Tram Pass", new GUILayoutOption[0]);
                        PlayerData.instance.hasQuill = GUILayout.Toggle(PlayerData.instance.hasQuill, "Quill&Ink", new GUILayoutOption[0]);
                        PlayerData.instance.hasCityKey = GUILayout.Toggle(PlayerData.instance.hasCityKey, "City Key", new GUILayoutOption[0]);
                        PlayerData.instance.hasSlykey = GUILayout.Toggle(PlayerData.instance.hasSlykey, "Sly Key", new GUILayoutOption[0]);
                        PlayerData.instance.hasWhiteKey = GUILayout.Toggle(PlayerData.instance.hasWhiteKey, "White Key", new GUILayoutOption[0]);
                        PlayerData.instance.hasLoveKey = GUILayout.Toggle(PlayerData.instance.hasLoveKey, "Love Key", new GUILayoutOption[0]);
                        PlayerData.instance.hasKingsBrand = GUILayout.Toggle(PlayerData.instance.hasKingsBrand, "King's Brand", new GUILayoutOption[0]);
                        PlayerData.instance.hasXunFlower = GUILayout.Toggle(PlayerData.instance.hasXunFlower, "Damn Flower", new GUILayoutOption[0]);
                        GUILayout.EndVertical();
                        GUILayout.EndArea();
                        GUI.skin.button.alignment = alignment5;
                        GUI.contentColor = contentColor3;
                        GUI.backgroundColor = backgroundColor4;
                        GUI.skin.button.fontSize = fontSize6;
                    }
                    if (this.bossSub)
                    {
                        TextAnchor alignment6 = GUI.skin.button.alignment;
                        int fontSize7 = GUI.skin.button.fontSize;
                        Color contentColor4 = GUI.contentColor;
                        Color backgroundColor5 = GUI.backgroundColor;
                        GUI.skin.button.alignment = TextAnchor.MiddleLeft;
                        GUI.skin.button.fontSize = 18;
                        GUI.contentColor = Color.white;
                        GUI.backgroundColor = Color.white;
                        GUILayout.BeginArea(new Rect(320f, 0f, 150f, 1005f));
                        GUILayout.FlexibleSpace();
                        GUILayout.BeginVertical("box", new GUILayoutOption[0]);
                        GUILayout.Label("[BOSSES]:", new GUILayoutOption[0]);
                        if (this.bossFound)
                        {
                            if (GUILayout.Button("Force respawn", new GUILayoutOption[]
                            {
                            GUILayout.Height(20f)
                            }))
                            {
                                if (this.bossData[this.gm.sceneName].Key)
                                {
                                    PlayMakerFSM[] components = GameObject.Find(this.bossData[this.gm.sceneName].Value).GetComponents<PlayMakerFSM>();
                                    if (components != null)
                                    {
                                        foreach (PlayMakerFSM playMakerFSM in components)
                                        {
                                            if (playMakerFSM.FsmVariables.GetFsmBool("Activated") != null)
                                            {
                                                playMakerFSM.FsmVariables.GetFsmBool("Activated").Value = false;
                                                this.addLine("Boss control for this scene was reset, re-enter scene or warp");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        this.addLine("GO does not exist or no FSM on it");
                                    }
                                }
                                else
                                {
                                    PlayerData.instance.GetType().GetField(this.bossData[this.gm.sceneName].Value).SetValue(PlayerData.instance, false);
                                    this.addLine("Boss control for this scene was reset, re-enter scene or warp");
                                }
                            }
                        }
                        else
                        {
                            FontStyle fontStyle4 = GUI.skin.label.fontStyle;
                            GUI.skin.label.fontStyle = FontStyle.Italic;
                            GUILayout.Label("<no data>", new GUILayoutOption[0]);
                            GUI.skin.label.fontStyle = fontStyle4;
                        }
                        GUILayout.Label("[GHOSTS]:", new GUILayoutOption[0]);
                        if (this.ghostFound)
                        {
                            if (GUILayout.Button("Force respawn", new GUILayoutOption[]
                            {
                            GUILayout.Height(20f)
                            }))
                            {
                                PlayerData.instance.GetType().GetField(this.ghostData[this.gm.sceneName]).SetValue(PlayerData.instance, 0);
                                this.addLine("Ghost Boss for this scene was reset, re-enter scene or warp");
                            }
                        }
                        else
                        {
                            FontStyle fontStyle5 = GUI.skin.label.fontStyle;
                            GUI.skin.label.fontStyle = FontStyle.Italic;
                            GUILayout.Label("<no data>", new GUILayoutOption[0]);
                            GUI.skin.label.fontStyle = fontStyle5;
                        }
                        GUILayout.Label("[DREAMBOSS]:", new GUILayoutOption[0]);
                        GUI.backgroundColor = Color.green;
                        PlayerData.instance.falseKnightDreamDefeated = GUILayout.Toggle(PlayerData.instance.falseKnightDreamDefeated, "Failed Knght", new GUILayoutOption[0]);
                        PlayerData.instance.mageLordDreamDefeated = GUILayout.Toggle(PlayerData.instance.mageLordDreamDefeated, "Soul Tyrant", new GUILayoutOption[0]);
                        PlayerData.instance.infectedKnightDreamDefeated = GUILayout.Toggle(PlayerData.instance.infectedKnightDreamDefeated, "Lost Kin", new GUILayoutOption[0]);
                        GUI.skin.button.alignment = alignment6;
                        GUI.contentColor = contentColor4;
                        GUI.backgroundColor = backgroundColor5;
                        GUI.skin.button.fontSize = fontSize7;
                        GUILayout.EndVertical();
                        GUILayout.EndArea();
                    }
                    if (this.DGsub)
                    {
                        TextAnchor alignment7 = GUI.skin.button.alignment;
                        int fontSize8 = GUI.skin.button.fontSize;
                        Color contentColor5 = GUI.contentColor;
                        Color backgroundColor6 = GUI.backgroundColor;
                        TextAnchor alignment8 = GUI.skin.label.alignment;
                        int fontSize10 = GUI.skin.label.fontSize;
                        GUI.skin.button.alignment = TextAnchor.MiddleLeft;
                        GUI.skin.button.fontSize = 18;
                        GUI.contentColor = Color.white;
                        GUI.backgroundColor = Color.white;
                        GUILayout.BeginArea(new Rect(940f, 705f, 200f, 300f));
                        GUI.skin.button.alignment = TextAnchor.MiddleCenter;
                        GUILayout.BeginHorizontal("box", new GUILayoutOption[0]);
                        if (GUILayout.Button("U", new GUILayoutOption[]
                        {
                        GUILayout.Height(30f),
                        GUILayout.Width(30f)
                        }))
                        {
                            this.DGdel = false;
                            FSMUtility.LocateFSM(this.refKnight, "Dream Nail").FsmVariables.GetFsmBool("Dream Warp Allowed").Value = true;
                            this.addLine("Unlocked Dream Warp, use at your own risk");
                        }
                        GUILayout.FlexibleSpace();
                        if (this.DGData != null && GUILayout.Button("R", new GUILayoutOption[]
                        {
                        GUILayout.Height(30f),
                        GUILayout.Width(30f)
                        }))
                        {
                            this.DGdel = false;
                            if (!this.DGdataBusy)
                            {
                                this.addLine("Updating DGdata from the file...");
                                this.readDGdata(true);
                            }
                            else
                            {
                                this.addLine("Cannot read DGdata right now");
                            }
                        }
                        GUILayout.FlexibleSpace();
                        if (this.DGData != null && this.DGData.Count > 0 && GUILayout.Button("S", new GUILayoutOption[]
                        {
                        GUILayout.Height(30f),
                        GUILayout.Width(30f)
                        }))
                        {
                            this.DGdel = false;
                            if (!this.DGdataBusy)
                            {
                                this.addLine("Writing DGdata to the file...");
                                this.writeDGdata();
                            }
                            else
                            {
                                this.addLine("Cannot write DGdata right now");
                            }
                        }
                        GUILayout.FlexibleSpace();
                        Color backgroundColor7 = GUI.backgroundColor;
                        if (this.DGadd)
                        {
                            GUI.backgroundColor = Color.yellow;
                        }
                        this.DGadd = GUILayout.Toggle(this.DGadd, "A", "Button", new GUILayoutOption[]
                        {
                        GUILayout.Height(30f),
                        GUILayout.Width(30f)
                        });
                        GUILayout.FlexibleSpace();
                        if (this.DGdel)
                        {
                            GUI.backgroundColor = Color.red;
                        }
                        this.DGdel = GUILayout.Toggle(this.DGdel, "D", "Button", new GUILayoutOption[]
                        {
                        GUILayout.Height(30f),
                        GUILayout.Width(30f)
                        });
                        GUI.backgroundColor = backgroundColor7;
                        GUILayout.EndHorizontal();
                        if (this.DGadd && this.DGData != null)
                        {
                            GUI.skin.button.alignment = TextAnchor.MiddleCenter;
                            GUI.skin.textField.alignment = TextAnchor.MiddleLeft;
                            GUI.skin.textField.fontSize = 18;
                            GUI.skin.textField.fontStyle = FontStyle.Bold;
                            GUILayout.BeginHorizontal("box", new GUILayoutOption[0]);
                            this.DGentry = GUILayout.TextField(this.DGentry, 25, new GUILayoutOption[]
                            {
                            GUILayout.Height(30f),
                            GUILayout.Width(165f)
                            });
                            if (GUILayout.Button("+", new GUILayoutOption[]
                            {
                            GUILayout.Height(30f),
                            GUILayout.Width(30f)
                            }))
                            {
                                if (!string.IsNullOrEmpty(this.DGentry) && !this.DGentry.Contains("|") && this.DGData != null && !this.DGData.ContainsKey(this.DGentry) && !this.DGdataBusy)
                                {
                                    float[] value6 = new float[]
                                    {
                                    this.refKnight.transform.position.x,
                                    this.refKnight.transform.position.y
                                    };
                                    this.DGdel = false;
                                    this.DGdataBusy = true;
                                    this.DGData.Add(this.DGentry, new KeyValuePair<string, float[]>(this.gm.sceneName, value6));
                                    this.DGdataBusy = false;
                                    this.addLine("Added new DGdata entry named: " + this.DGentry);
                                    this.DGadd = false;
                                }
                                else
                                {
                                    this.addLine("Entry name either empty or contains symbol '|' or entry with the same name already exist or some weird as shit internal error");
                                }
                            }
                            GUILayout.EndHorizontal();
                        }
                        GUI.skin.button.alignment = alignment8;
                        GUI.skin.button.alignment = TextAnchor.MiddleLeft;
                        if (this.DGData != null && this.DGData.Count > 0)
                        {
                            GUILayout.FlexibleSpace();
                            GUILayout.BeginVertical("box", new GUILayoutOption[0]);
                            this.SMscroll = GUILayout.BeginScrollView(this.SMscroll, false, true, GUIStyle.none, GUI.skin.verticalScrollbar, new GUILayoutOption[]
                            {
                            GUILayout.MaxHeight(200f),
                            GUILayout.MaxHeight(300f),
                            GUILayout.ExpandHeight(false)
                            });
                            if (!this.DGdataBusy)
                            {
                                foreach (string text in this.DGData.Keys)
                                {
                                    if (GUILayout.Button(text, new GUILayoutOption[]
                                    {
                                    GUILayout.Height(20f)
                                    }))
                                    {
                                        if (this.DGdel)
                                        {
                                            this.DGdataBusy = true;
                                            this.addLine("Removed entry " + text + " from the list");
                                            this.DGData.Remove(text);
                                            this.DGdataBusy = false;
                                            this.DGdel = false;
                                            GUIUtility.ExitGUI();
                                        }
                                        else
                                        {
                                            PlayerData.instance.dreamGateScene = this.DGData[text].Key;
                                            PlayerData.instance.dreamGateX = this.DGData[text].Value[0];
                                            PlayerData.instance.dreamGateY = this.DGData[text].Value[1];
                                            this.addLine(string.Concat(new string[]
                                            {
                                            "New Dreamgate warp set: ",
                                            PlayerData.instance.dreamGateScene,
                                            "/",
                                            PlayerData.instance.dreamGateX.ToString(),
                                            "/",
                                            PlayerData.instance.dreamGateY.ToString()
                                            }));
                                        }
                                    }
                                }
                            }
                            GUILayout.EndScrollView();
                            GUILayout.EndVertical();
                        }
                        else
                        {
                            GUILayout.BeginVertical("box", new GUILayoutOption[0]);
                            GUILayout.Label("No DGdata found", new GUILayoutOption[0]);
                            GUILayout.FlexibleSpace();
                            GUILayout.EndVertical();
                        }
                        GUI.skin.button.alignment = alignment7;
                        GUI.contentColor = contentColor5;
                        GUI.backgroundColor = backgroundColor6;
                        GUI.skin.button.fontSize = fontSize8;
                        GUILayout.EndArea();
                    }
                    GUI.skin.toggle.fontSize = fontSize3;
                    GUI.skin.toggle.fontStyle = fontStyle3;
                }
                if ((this.showConsole || UIManager.instance.uiState == UIState.PAUSED) && !this.DGsub)
                {
                    GUI.skin.label.fontStyle = FontStyle.Bold;
                    GUI.skin.label.alignment = TextAnchor.UpperLeft;
                    GUI.skin.label.alignment = TextAnchor.UpperLeft;
                    GUI.skin.label.fontSize = 18;
                    new GUIStyle().fontSize = 18;
                    GUI.BeginGroup(new Rect(1125f, 720f, 820f, 360f));
                    this.consoleScroll = GUILayout.BeginScrollView(this.consoleScroll, new GUILayoutOption[]
                    {
                    GUILayout.MaxWidth(800f),
                    GUILayout.MaxHeight(345f),
                    GUILayout.ExpandHeight(false)
                    });
                    if (this.consoleHist.Count <= 150)
                    {
                        GUILayout.Label(string.Join("\n", this.consoleHist.ToArray()), new GUILayoutOption[]
                        {
                        GUILayout.ExpandHeight(true)
                        });
                    }
                    else
                    {
                        GUILayout.Label(string.Join("\n", this.consoleHist.GetRange(this.consoleHist.Count - 150, 150).ToArray()), new GUILayoutOption[]
                        {
                        GUILayout.ExpandHeight(true)
                        });
                    }
                    GUILayout.EndScrollView();
                    GUI.EndGroup();
                }
                else if (((!this.showConsole && UIManager.instance.uiState == UIState.PLAYING) || (this.DGsub && UIManager.instance.uiState == UIState.PAUSED)) && !string.IsNullOrEmpty(this.GUIstring) && this.GUIalpha > 0f)
                {
                    Color color = GUI.color;
                    GUI.color = new Color(1f, 1f, 1f, this.GUIalpha);
                    TextAnchor alignment9 = GUI.skin.label.alignment;
                    GUI.skin.label.fontStyle = FontStyle.Bold;
                    GUI.skin.label.alignment = TextAnchor.UpperRight;
                    GUI.skin.label.fontSize = 18;
                    GUI.Label(new Rect(1f, 1050f, 1915f, 30f), this.GUIstring.ToString());
                    GUI.color = color;
                    GUI.skin.label.alignment = alignment9;
                }
                if (this.gm.IsGameplayScene() && this.showHelp)
                {
                    TextAnchor alignment10 = GUI.skin.label.alignment;
                    TextAnchor alignment11 = GUI.skin.label.alignment;
                    int fontSize9 = GUI.skin.label.fontSize;
                    GUI.skin.label.alignment = TextAnchor.UpperLeft;
                    GUI.skin.label.fontStyle = FontStyle.Bold;
                    GUI.skin.label.fontSize = 18;
                    GUI.Label(new Rect(10f, 215f, 500f, 820f), string.Concat(new string[]
                    {
                    "~ ----- HIDE/SHOW HELP",
                    Environment.NewLine,
                    " ",
                    Environment.NewLine,
                    "F1 ---- HIDE/SHOW ALL GUI",
                    Environment.NewLine,
                    "F2 ---- SHOW/HIDE STATE PANEL",
                    Environment.NewLine,
                    "F3 ---- SHOW/HIDE BUTTONS",
                    Environment.NewLine,
                    "F4 ---- SHOW/HIDE CONSOLE",
                    Environment.NewLine,
                    "F5 ---- FORCE PAUSE MENU",
                    Environment.NewLine,
                    "F6 ---- HAZARD RESPAWN",
                    Environment.NewLine,
                    "F7 ---- SET HZRD RESPAWN",
                    Environment.NewLine,
                    "F8 ---- FORCE CAMERA TO FOLLOW",
                    Environment.NewLine,
                    "F9 ---- ENEMY PANEL",
                    Environment.NewLine,
                    "F10 --- HERO SELF-DAMAGE",
                    Environment.NewLine,
                    " ",
                    Environment.NewLine,
                    "PLUS ------ nailDamage +4",
                    Environment.NewLine,
                    "MINUS ----- nailDamage -4",
                    Environment.NewLine,
                    "NUMPAD+ --- TimeScale UP",
                    Environment.NewLine,
                    "NUMPAD- --- TimeScale DOWN",
                    Environment.NewLine,
                    "HOME ------ TOGGLE HeroLight",
                    Environment.NewLine,
                    " ",
                    Environment.NewLine,
                    "INSERT ---- TOGGLE Vignette",
                    Environment.NewLine,
                    "PageUP ---- CAMERA ZOOM+ ",
                    Environment.NewLine,
                    "PageDN ---- CAMERA ZOOM-",
                    Environment.NewLine,
                    "END ------- RESET ZOOM",
                    Environment.NewLine,
                    "DELETE ---- TOGGLE HUD",
                    Environment.NewLine,
                    "BACKSPC --- HIDE HERO",
                    Environment.NewLine,
                    "ESCAPE ---- CALL ALL PANELS",
                    Environment.NewLine,
                    Environment.NewLine,
                    Environment.NewLine,
                    Environment.NewLine,
                    "Press [`] to hide Help"
                    }));
                    GUI.skin.label.alignment = alignment10;
                    GUI.skin.label.alignment = alignment11;
                    GUI.skin.label.fontSize = fontSize9;
                }
                if (this.enemyPanel && !HeroController.instance.cState.transitioning && this.gm.IsGameplayScene())
                {
                    GUI.skin.button.alignment = TextAnchor.MiddleRight;
                    GUI.skin.label.fontStyle = FontStyle.Bold;
                    GUI.skin.button.fontSize = 18;
                    GUI.contentColor = Color.white;
                    GUI.skin.label.alignment = TextAnchor.MiddleRight;
                    GUI.skin.label.fontSize = 19;
                    GUI.Label(new Rect(1560f, 150f, 350f, 30f), "[ENEMY LIST]");
                    GUI.skin.label.fontSize = 18;
                    int num3 = 0;
                    if (this.enemyPool.Count > 0)
                    {
                        int num4 = 0;
                        int num5 = 0;
                        this.tempEData.Clear();
                        this.tempEData.AddRange(this.enemyPool.Keys);
                        for (int j = 0; j < this.tempEData.Count; j++)
                        {
                            GameObject gameObject = this.tempEData[j];
                            if (gameObject != null)
                            {
                                Vector3 position2 = gameObject.transform.position;
                                string text2 = gameObject.name;
                                if (text2.Length > 28)
                                {
                                    text2 = text2.Substring(0, 28) + "...";
                                }
                                int value7 = this.enemyPool[gameObject].FSM.FsmVariables.GetFsmInt("HP").Value;
                                if (UIManager.instance.uiState == UIState.PLAYING)
                                {
                                    if (gameObject.activeSelf)
                                    {
                                        num3++;
                                        if (this.attachHP)
                                        {
                                            GUI.matrix = matrix;
                                            GUI.skin.label.fontStyle = FontStyle.Bold;
                                            GUI.skin.label.fontSize = 22;
                                            GUI.skin.label.alignment = TextAnchor.MiddleCenter;
                                            if (this.enemyPool[gameObject].Spr != null)
                                            {
                                                int hp = this.enemyPool[gameObject].HP;
                                                Vector2 vector = Camera.main.WorldToScreenPoint(gameObject.transform.position);
                                                Bounds bounds = (this.enemyPool[gameObject].Spr as tk2dSprite).GetBounds();
                                                Vector3 vector2 = Camera.main.WorldToScreenPoint(new Vector3(bounds.min.x, bounds.min.y, bounds.min.z));
                                                float num6 = (Camera.main.WorldToScreenPoint(new Vector3(bounds.max.x, bounds.max.y, bounds.min.z)).y - vector2.y) / 2f;
                                                float num7 = 100f * this.scale.x;
                                                float num8 = 20f * this.scale.y;
                                                if (hp >= 1000)
                                                {
                                                    num7 = 120f * this.scale.x;
                                                }
                                                float num9 = num7;
                                                num9 *= (float)value7 / (float)hp;
                                                if (value7 > hp)
                                                {
                                                    num9 = num7;
                                                }
                                                float num10 = num7 / 2f;
                                                this.DrawRect(new Rect(vector.x - num10 - 1f, (float)Screen.height - vector.y - 1f - num6, num7 + 1f, num8 + 1f), Color.black);
                                                if (hp != 0 && value7 > 0)
                                                {
                                                    this.DrawRect(new Rect(vector.x - num10, (float)Screen.height - vector.y - num6, num9, num8), Color.red);
                                                }
                                                GUI.skin.label.fontSize = (int)Math.Round((double)(22f * this.scale.y), 0);
                                                GUI.Label(new Rect(vector.x - num10, (float)Screen.height - vector.y - num6 - 2f, num7, num8 + 2f), value7.ToString() + "/" + hp.ToString());
                                            }
                                            GUI.skin.label.alignment = TextAnchor.MiddleCenter;
                                            GUI.skin.label.fontSize = 18;
                                            GUI.skin.label.alignment = TextAnchor.MiddleRight;
                                            GUI.matrix = Matrix4x4.TRS(Vector3.zero, Quaternion.identity, this.scale);
                                        }
                                        else if (position2.y > 0f && position2.y < this.gm.sceneHeight && position2.x > 0f && position2.x < this.gm.sceneWidth && this.enemyPool[gameObject].HP >= this.hpLimit)
                                        {
                                            Vector2 scrollPosition = Vector2.zero;
                                            scrollPosition = GUI.BeginScrollView(new Rect(1525f, 180f, 395f, 540f), scrollPosition, new Rect(0f, 0f, 360f, (float)(this.enemyPool.Count * 30)), GUIStyle.none, GUIStyle.none);
                                            Rect position4 = new Rect(0f, (float)(num4 * 30), 390f, 30f);
                                            string[] array2 = new string[5];
                                            array2[0] = text2;
                                            array2[1] = "   ";
                                            array2[2] = value7.ToString();
                                            array2[3] = "/";
                                            int num11 = 4;
                                            array2[num11] = this.enemyPool[gameObject].HP.ToString();
                                            GUI.Label(position4, string.Concat(array2));
                                            GUI.EndScrollView();
                                            num4++;
                                        }
                                        if (this.showBox && (this.enemyPool[gameObject].Spr as tk2dSprite).boxCollider2D != null)
                                        {
                                            GUI.matrix = matrix;
                                            BoxCollider2D boxCollider2D = (this.enemyPool[gameObject].Spr as tk2dSprite).boxCollider2D;
                                            Bounds bounds2 = boxCollider2D.bounds;
                                            Vector3 position3 = base.transform.TransformPoint(boxCollider2D.bounds.center);
                                            Vector2 vector3 = Camera.main.WorldToScreenPoint(position3);
                                            Vector3 vector4 = Camera.main.WorldToScreenPoint(new Vector3(bounds2.min.x, bounds2.min.y, bounds2.min.z));
                                            Vector3 vector5 = Camera.main.WorldToScreenPoint(new Vector3(bounds2.max.x, bounds2.max.y, bounds2.max.z));
                                            float num12 = vector5.x - vector4.x;
                                            float num13 = vector5.y - vector4.y;
                                            float x = vector3.x - num12 * 0.5f;
                                            float y = (float)Screen.height - vector3.y - num13 * 0.5f;
                                            Color yellow = Color.yellow;
                                            yellow.a = 0.7f;
                                            this.DrawRect(new Rect(x, y, num12, num13), yellow);
                                            GUI.matrix = Matrix4x4.TRS(Vector3.zero, Quaternion.identity, this.scale);
                                        }
                                    }
                                }
                                else if (UIManager.instance.uiState == UIState.PAUSED)
                                {
                                    GUI.contentColor = Color.white;
                                    if (!gameObject.activeSelf)
                                    {
                                        GUI.contentColor = Color.gray;
                                    }
                                    this.enemyScroll = GUI.BeginScrollView(new Rect(1430f, 180f, 490f, 540f), this.enemyScroll, new Rect(0f, 0f, 470f, (float)(this.enemyPool.Count * 30)));
                                    Rect position5 = new Rect(90f, (float)(num5 * 30), 390f, 30f);
                                    string[] array3 = new string[5];
                                    array3[0] = text2;
                                    array3[1] = "   ";
                                    array3[2] = value7.ToString();
                                    array3[3] = "/";
                                    int num14 = 4;
                                    array3[num14] = this.enemyPool[gameObject].HP.ToString();
                                    if (GUI.Button(position5, string.Concat(array3)))
                                    {
                                        this.addLine("Color: " + (this.enemyPool[gameObject].Spr as tk2dSprite).color.a.ToString());
                                        gameObject.SetActive(!gameObject.activeSelf);
                                        this.addLine("Changed the state of enemy gO to " + gameObject.activeSelf.ToString().ToUpper());
                                    }
                                    GUI.skin.button.alignment = TextAnchor.MiddleCenter;
                                    if (GUI.Button(new Rect(0f, (float)(num5 * 30), 30f, 30f), "C"))
                                    {
                                        GameObject gameObject2 = UnityEngine.Object.Instantiate(gameObject, gameObject.transform.position, base.transform.rotation) as GameObject;
                                        Component component = gameObject2.GetComponent<tk2dSprite>();
                                        PlayMakerFSM playMakerFSM2 = FSMUtility.LocateFSM(gameObject2, this.enemyPool[gameObject].FSM.FsmName);
                                        int value8 = playMakerFSM2.FsmVariables.GetFsmInt("HP").Value;
                                        this.enemyPool.Add(gameObject2, new onData
                                        {
                                            HP = Convert.ToInt32(value8),
                                            FSM = playMakerFSM2,
                                            Spr = component
                                        });
                                        this.addLine("Cloning enemy as: " + gameObject2.name);
                                    }
                                    if (GUI.Button(new Rect(30f, (float)(num5 * 30), 30f, 30f), "D"))
                                    {
                                        this.addLine("Destroying enemy: " + gameObject.name);
                                        this.enemyPool.Remove(gameObject);
                                        UnityEngine.Object.DestroyImmediate(gameObject);
                                    }
                                    if (GUI.Button(new Rect(60f, (float)(num5 * 30), 30f, 30f), "∞"))
                                    {
                                        this.enemyPool[gameObject].FSM.FsmVariables.GetFsmInt("HP").Value = 9999;
                                        this.enemyPool[gameObject].HP = 9999;
                                        this.addLine("HP for enemy: " + gameObject.name + " is now 9999");
                                    }
                                    GUI.skin.button.alignment = TextAnchor.MiddleRight;
                                    GUI.EndScrollView();
                                    GUI.contentColor = Color.white;
                                }
                                num5++;
                            }
                            else
                            {
                                this.enemyPool.Remove(gameObject);
                            }
                        }
                    }
                    if (this.enemyPool.Count > 0 && UIManager.instance.uiState != UIState.PAUSED)
                    {
                        GUI.skin.label.fontStyle = FontStyle.Italic;
                        GUI.skin.label.fontSize = 18;
                        GUI.skin.label.alignment = TextAnchor.MiddleRight;
                        int num15 = 0;
                        if (this.hpLimit != 0)
                        {
                            num15 = this.enemyPool.Aggregate(delegate (KeyValuePair<GameObject, onData> l, KeyValuePair<GameObject, onData> r)
                            {
                                if (l.Value.HP <= r.Value.HP)
                                {
                                    return r;
                                }
                                return l;
                            }).Value.HP;
                        }
                        if (this.attachHP && num3 != 0)
                        {
                            GUI.Label(new Rect(1560f, 180f, 350f, 30f), "<HP bars enabled>");
                        }
                        if (num3 == 0)
                        {
                            GUI.Label(new Rect(1560f, 180f, 350f, 30f), "<No active enemies>");
                        }
                        if (!this.attachHP && num3 != 0 && this.hpLimit > num15)
                        {
                            GUI.Label(new Rect(1560f, 180f, 350f, 30f), "<No matching enemies>");
                        }
                        GUI.skin.label.fontSize = 18;
                        GUI.skin.label.fontStyle = FontStyle.Bold;
                    }
                    float num16 = 0f;
                    if (this.enemyPool.Count < 1)
                    {
                        GUI.skin.label.fontStyle = FontStyle.Italic;
                        GUI.skin.label.fontSize = 18;
                        GUI.Label(new Rect(1560f, 180f, 350f, 30f), "<empty>");
                        GUI.skin.label.fontSize = 18;
                        GUI.skin.label.fontStyle = FontStyle.Bold;
                        num16 = 30f;
                    }
                    GUI.skin.label.alignment = TextAnchor.MiddleCenter;
                    if (UIManager.instance.uiState == UIState.PAUSED)
                    {
                        GUILayout.BeginArea(new Rect(1685f, 122f, 230f, 30f));
                        GUILayout.BeginHorizontal("", new GUILayoutOption[0]);
                        GUI.skin.label.alignment = TextAnchor.MiddleLeft;
                        GUILayout.Label("Narrow HP:", new GUILayoutOption[]
                        {
                        GUILayout.MaxWidth(115f)
                        });
                        GUI.skin.label.alignment = TextAnchor.MiddleCenter;
                        GUILayout.Label(this.hpLimit.ToString(), new GUILayoutOption[]
                        {
                        GUILayout.MaxWidth(30f),
                        GUILayout.MaxWidth(50f),
                        GUILayout.ExpandWidth(true)
                        });
                        GUI.skin.label.alignment = TextAnchor.MiddleRight;
                        GUI.skin.button.alignment = TextAnchor.MiddleCenter;
                        if (GUILayout.Button("<color=green>+</color>", new GUILayoutOption[]
                        {
                        GUILayout.MinWidth(30f)
                        }))
                        {
                            this.hpLimit += 10;
                        }
                        if (GUILayout.Button("<color=red>-</color>", new GUILayoutOption[]
                        {
                        GUILayout.MinWidth(30f)
                        }) && this.hpLimit - 10 >= 0)
                        {
                            this.hpLimit -= 10;
                        }
                        GUI.skin.button.alignment = TextAnchor.MiddleRight;
                        GUILayout.EndHorizontal();
                        GUILayout.EndArea();
                        num16 = 180f + (float)this.enemyPool.Count * 30f + num16;
                        if (this.enemyPool.Count > 18)
                        {
                            num16 = 723f;
                        }
                        GUI.BeginGroup(new Rect(1484f, num16, 426f, 80f));
                        TextAnchor alignment12 = GUI.skin.button.alignment;
                        GUI.skin.button.alignment = TextAnchor.MiddleRight;
                        if (GUI.Button(new Rect(0f, 0f, 120f, 30f), "HITBOX?"))
                        {
                            this.showBox = !this.showBox;
                        }
                        if (GUI.Button(new Rect(122f, 0f, 120f, 30f), "HP BARS?"))
                        {
                            this.attachHP = !this.attachHP;
                        }
                        if (GUI.Button(new Rect(245f, 0f, 90f, 30f), new GUIContent("AUTO?", "Possible performance hit!")))
                        {
                            if (!base.IsInvoking("enemyUpdate"))
                            {
                                this.autoUpdate = true;
                                base.InvokeRepeating("enemyUpdate", 1f, 2f);
                                this.addLine("Enemy collision autoscan is ENABLED. WARNING: may affect performance!");
                            }
                            else
                            {
                                this.autoUpdate = false;
                                base.CancelInvoke("enemyUpdate");
                                this.addLine("Enemy collision autoscan is DISABLED");
                            }
                        }
                        TextAnchor alignment13 = GUI.skin.label.alignment;
                        FontStyle fontStyle6 = GUI.skin.label.fontStyle;
                        GUI.skin.label.alignment = TextAnchor.UpperLeft;
                        GUI.skin.label.fontStyle = FontStyle.Italic;
                        GUI.Label(new Rect(0f, 40f, 300f, 30f), GUI.tooltip);
                        GUI.skin.label.alignment = alignment13;
                        GUI.skin.label.fontStyle = fontStyle6;
                        if (GUI.Button(new Rect(336f, 0f, 90f, 30f), "SCAN"))
                        {
                            this.enemyUpdate(200f);
                            this.addLine("Refreshing collider data...");
                        }
                        GUI.skin.button.alignment = alignment12;
                        if (this.showBox)
                        {
                            TextAnchor alignment14 = GUI.skin.label.alignment;
                            GUI.skin.label.alignment = TextAnchor.MiddleLeft;
                            GUI.Label(new Rect(2f, 0f, 30f, 30f), "<color=lime>✔</color>");
                            GUI.skin.label.alignment = alignment14;
                        }
                        if (this.attachHP)
                        {
                            TextAnchor alignment15 = GUI.skin.label.alignment;
                            GUI.skin.label.alignment = TextAnchor.MiddleLeft;
                            GUI.Label(new Rect(124f, 0f, 30f, 30f), "<color=lime>✔</color>");
                            GUI.skin.label.alignment = alignment15;
                        }
                        if (this.autoUpdate)
                        {
                            TextAnchor alignment16 = GUI.skin.label.alignment;
                            GUI.skin.label.alignment = TextAnchor.MiddleLeft;
                            GUI.Label(new Rect(247f, 0f, 30f, 30f), "<color=lime>✔</color>");
                            GUI.skin.label.alignment = alignment16;
                        }
                        GUI.EndGroup();
                    }
                }
            }
            if (UIManager.instance.menuState.ToString() == "MAIN_MENU")
            {
                if (this.listReady)
                {
                    GUI.skin.label.alignment = TextAnchor.UpperLeft;
                    GUI.skin.button.alignment = TextAnchor.MiddleCenter;
                    GUI.skin.button.fontStyle = FontStyle.Bold;
                    GUI.skin.button.fontSize = 16;
                    this.SMscroll = GUI.BeginScrollView(new Rect(0f, 20f, 320f, 300f), this.SMscroll, new Rect(0f, 30f, 300f, (float)(this.fileList.Length * 30)), false, true);
                    this.selGridInt = GUI.SelectionGrid(new Rect(0f, 30f, 300f, (float)(this.fileList.Length * 30)), this.selGridInt, this.fileList, 1);
                    GUI.Label(new Rect(3f, (float)((this.selGridInt + 1) * 30 + 1), 30f, 30f), " <size=20><color=lime>✔</color> </size>");
                    GUI.EndScrollView();
                    if (GUI.Button(new Rect(0f, 330f, 148f, 30f), "COPY"))
                    {
                        Debug.Log("[SAVEGAME MANAGER] Selected file in list: " + this.fileList[this.selGridInt]);
                        Debug.Log("[SAVEGAME MANAGER] File to copy: " + this.copyList[this.selGridInt]);
                        this.copyFile();
                        UIManager.instance.UIGoToProfileMenu();
                    }
                    if (GUI.Button(new Rect(151f, 330f, 148f, 30f), "REFRESH"))
                    {
                        Debug.Log("[SAVEGAME MANAGER] Refresh requested");
                        this.listReady = false;
                        this.populateList();
                        return;
                    }
                }
                else
                {
                    GUI.Label(new Rect(10f, 10f, 500f, 50f), "<size=16>Savegame Manager is unavailable, check README and output_log.txt for info</size>");
                }
            }
            GUI.matrix = matrix;
        }

        // Token: 0x0600313C RID: 12604
        public void OnLevelUnload()
        {
            this.unloadTime = Time.realtimeSinceStartup;
        }

        // Token: 0x0600313D RID: 12605
        public string ReadInput()
        {
            string empty = string.Empty;
            string format = "Move Vector: {0}, {1}";
            Vector2 vector = this.ih.inputActions.moveVector.Vector;
            object arg = vector.x.ToString();
            vector = this.ih.inputActions.moveVector.Vector;
            return string.Concat(new string[]
            {
            empty,
            string.Format(format, arg, vector.y.ToString()),
            string.Format("\nMove Pressed: {0}", this.ih.inputActions.left.IsPressed || this.ih.inputActions.right.IsPressed),
            string.Format("\nMove Raw L: {0} R: {1}", this.ih.inputActions.left.RawValue, this.ih.inputActions.right.RawValue),
            string.Format("\nInputX: " + this.ih.inputX, new object[0]),
            string.Format("\nAny Key Down: {0}", InputManager.AnyKeyIsPressed)
            });
        }

        // Token: 0x0600313E RID: 12606
        public void copyFile()
        {
            string text = Application.persistentDataPath + Path.DirectorySeparatorChar.ToString() + "user1.dat";
            string sourceFileName = this.copyList[this.selGridInt];
            string text2 = Application.persistentDataPath + Path.DirectorySeparatorChar.ToString() + "user1_original.bak";
            if (File.Exists(text) && !File.Exists(text2))
            {
                try
                {
                    File.Replace(sourceFileName, text, text2);
                    Debug.Log("[SAVEGAME MANAGER] Replaced requested files and made backup");
                    return;
                }
                catch (Exception arg)
                {
                    Debug.LogError("[SAVEGAME MANAGER] Unable to replace pre-existing discarded save file: " + arg);
                    return;
                }
            }
            try
            {
                File.Copy(sourceFileName, text, true);
                Debug.Log("[SAVEGAME MANAGER] Copied the practice file");
            }
            catch (Exception arg2)
            {
                Debug.LogError("[SAVEGAME MANAGER] Unable to replace pre-existing discarded save file: " + arg2);
            }
        }

        // Token: 0x0600313F RID: 12607
        public void addLine(string chatLine)
        {
            if (this.consoleHist.Count > 1000)
            {
                this.consoleHist.RemoveAt(1);
            }
            this.consoleHist.Add(chatLine);
            this.consoleScroll.y = this.consoleScroll.y + 50f;
            if (!this.showConsole)
            {
                this.GUIstring = chatLine;
                base.StartCoroutine("Fade");
            }
        }

        // Token: 0x06003140 RID: 12608
        public void enemyList()
        {
            if (this.enemyPanel && !this.enemyCheck)
            {
                GameObject[] rootGameObjects = UnityEngine.SceneManagement.SceneManager.GetSceneByName(this.gm.sceneName).GetRootGameObjects();
                if (rootGameObjects != null)
                {
                    foreach (GameObject gameObject in rootGameObjects)
                    {
                        if ((gameObject.layer == 11 || gameObject.layer == 17) && !this.enemyIgnore(gameObject.name))
                        {
                            PlayMakerFSM playMakerFSM = FSMUtility.LocateFSM(gameObject, "health_manager_enemy");
                            Component component = gameObject.GetComponent<tk2dSprite>();
                            if (playMakerFSM == null)
                            {
                                playMakerFSM = FSMUtility.LocateFSM(gameObject, "health_manager");
                            }
                            int num3 = gameObject.name.IndexOf("grass", StringComparison.OrdinalIgnoreCase);
                            int num2 = gameObject.name.IndexOf("hopper", StringComparison.OrdinalIgnoreCase);
                            if (num3 >= 0 && num2 >= 0)
                            {
                                component = gameObject.transform.FindChild("Sprite").gameObject.gameObject.GetComponent<tk2dSprite>();
                            }
                            if (playMakerFSM != null)
                            {
                                if (component == null)
                                {
                                    component = null;
                                }
                                int value = playMakerFSM.FsmVariables.GetFsmInt("HP").Value;
                                this.enemyPool.Add(gameObject, new onData
                                {
                                    HP = value,
                                    FSM = playMakerFSM,
                                    Spr = component
                                });
                            }
                        }
                        this.enemyDescendants(gameObject.transform);
                    }
                }
                if (this.enemyPool.Count > 0)
                {
                    this.addLine("Enemy data filled, entries added: " + this.enemyPool.Count);
                }
                this.enemyCheck = true;
                this.enemyUpdate(200f);
            }
        }

        // Token: 0x06003141 RID: 12609
        public void selfDamage()
        {
            if (PlayerData.instance.health <= 0 || HeroController.instance.cState.dead || !GameManager.instance.IsGameplayScene() || GameManager.instance.IsGamePaused() || HeroController.instance.cState.recoiling || HeroController.instance.cState.invulnerable)
            {
                this.addLine(string.Concat(new string[]
                {
                "Unacceptable conditions for selfDamage(",
                PlayerData.instance.health.ToString(),
                ",",
                HeroController.instance.cState.dead.ToString(),
                ",",
                GameManager.instance.IsGameplayScene().ToString(),
                ",",
                HeroController.instance.cState.recoiling.ToString(),
                ",",
                GameManager.instance.IsGamePaused().ToString(),
                ",",
                HeroController.instance.cState.invulnerable.ToString(),
                ").",
                " Pressed too many times at once?"
                }));
                return;
            }
            if (!this.enemyPanel)
            {
                this.addLine("Enable EnemyPanel for self-damage");
                return;
            }
            if (this.enemyPool.Count < 1)
            {
                this.addLine("Unable to locate a single enemy in the scene.");
                return;
            }
            System.Random random = new System.Random();
            if (HeroController.instance.cState.facingRight)
            {
                HeroController.instance.TakeDamage(this.enemyPool.ElementAt(random.Next(0, this.enemyPool.Count)).Key, CollisionSide.right);
                this.addLine("Attempting self-damage, right side");
                return;
            }
            HeroController.instance.TakeDamage(this.enemyPool.ElementAt(random.Next(0, this.enemyPool.Count)).Key, CollisionSide.left);
            this.addLine("Attempting self-damage, left side");
        }

        // Token: 0x06003142 RID: 12610
        public void Respawn()
        {
            if (GameManager.instance.IsGameplayScene() && !HeroController.instance.cState.dead && PlayerData.instance.health > 0)
            {
                if (UIManager.instance.uiState.ToString() == "PAUSED")
                {
                    UIManager.instance.TogglePauseGame();
                    GameManager.instance.HazardRespawn();
                    this.addLine("Closing Pause Menu and respawning...");
                    return;
                }
                if (UIManager.instance.uiState.ToString() == "PLAYING")
                {
                    HeroController.instance.RelinquishControl();
                    GameManager.instance.HazardRespawn();
                    HeroController.instance.RegainControl();
                    this.addLine("Respawn signal sent");
                    return;
                }
                this.addLine("Respawn requested in some weird conditions, abort, ABORT");
            }
        }

        // Token: 0x06003143 RID: 12611
        public void populateList()
        {
            if (Directory.Exists(Application.persistentDataPath + Path.DirectorySeparatorChar.ToString() + "practice"))
            {
                this.selGridInt = 0;
                this.fileList = Directory.GetFiles(Application.persistentDataPath + Path.DirectorySeparatorChar.ToString() + "practice", "*.dat");
                this.copyList = Directory.GetFiles(Application.persistentDataPath + Path.DirectorySeparatorChar.ToString() + "practice", "*.dat");
                if (this.fileList.Length != 0)
                {
                    for (int i = 0; i < this.fileList.Length; i++)
                    {
                        if (new FileInfo(this.fileList[i]).Name.Replace(".dat", "").Length > 25)
                        {
                            this.fileList[i] = new FileInfo(this.fileList[i]).Name.Replace(".dat", "").Substring(0, 25) + "...";
                        }
                        else
                        {
                            this.fileList[i] = new FileInfo(this.fileList[i]).Name.Replace(".dat", "");
                        }
                    }
                    this.listReady = true;
                    Debug.Log("[SAVEGAME MANAGER] Sucessfully updated list of files!");
                    return;
                }
                this.listReady = false;
                Debug.Log("[SAVEGAME MANAGER] Directory 'practice' is empty or does not contain any .dat files!");
            }
            this.listReady = false;
            Debug.Log("[SAVEGAME MANAGER] Directory 'practice' does not exist!");
        }

        // Token: 0x06003144 RID: 12612
        public void setMatrix()
        {
            this.originalWidth = (float)Screen.width;
            this.originalHeight = (float)Screen.height;
            this.scale.x = (float)Screen.width / 1920f;
            this.scale.y = (float)Screen.height / 1080f;
            this.scale.z = 1f;
        }

        // Token: 0x06003145 RID: 12613
        public void Update()
        {
            if (this.gm.sceneName != "Menu_Title")
            {
                if (Input.GetKeyUp(KeyCode.Equals))
                {
                    int num = 4;
                    if (PlayerData.instance.nailDamage == 0)
                    {
                        num = 5;
                    }
                    PlayerData.instance.nailDamage = PlayerData.instance.nailDamage + num;
                    PlayMakerFSM.BroadcastEvent("UPDATE NAIL DAMAGE");
                    this.addLine("Increased base nailDamage by " + num.ToString());
                }
                if (Input.GetKeyUp(KeyCode.Minus))
                {
                    int nailDamage = PlayerData.instance.nailDamage;
                    int num2 = PlayerData.instance.nailDamage - 4;
                    if (num2 >= 0)
                    {
                        PlayerData.instance.nailDamage = num2;
                        PlayMakerFSM.BroadcastEvent("UPDATE NAIL DAMAGE");
                        this.addLine("Decreased base nailDamage by 4");
                    }
                    else
                    {
                        this.addLine("Cannot set base nailDamage less than 0 therefore forcing 0 value");
                        PlayerData.instance.nailDamage = 0;
                        PlayMakerFSM.BroadcastEvent("UPDATE NAIL DAMAGE");
                    }
                }
                if (Input.GetKeyUp(KeyCode.BackQuote))
                {
                    if (this.showPanel)
                    {
                        this.showPanel = false;
                    }
                    this.showHelp = !this.showHelp;
                }
                if (Input.GetKeyUp(KeyCode.F1))
                {
                    this.showAll = !this.showAll;
                }
                if (Input.GetKeyUp(KeyCode.F2) && !Input.GetKey(KeyCode.LeftControl))
                {
                    if (this.showHelp)
                    {
                        this.showHelp = false;
                    }
                    this.showPanel = !this.showPanel;
                }
                if (Input.GetKey(KeyCode.LeftControl) && Input.GetKeyUp(KeyCode.F2))
                {
                    if (this.showPanelState >= 6)
                    {
                        this.showPanelState = 1;
                    }
                    else
                    {
                        this.showPanelState++;
                    }
                }
                if (Input.GetKeyUp(KeyCode.F3))
                {
                    this.showButtons = !this.showButtons;
                }
                if (Input.GetKeyUp(KeyCode.F4))
                {
                    this.showConsole = !this.showConsole;
                }
                if (Input.GetKeyUp(KeyCode.F5))
                {
                    if (PlayerData.instance.disablePause && this.gm.sceneName != "Menu_Title" && this.gm.IsGameplayScene() && !HeroController.instance.cState.recoiling)
                    {
                        PlayerData.instance.disablePause = false;
                        UIManager.instance.TogglePauseGame();
                        this.addLine("Forcing Pause Menu because pause is disabled");
                    }
                    else
                    {
                        this.addLine("Game does not report that Pause is disabled, requesting it normally.");
                        UIManager.instance.TogglePauseGame();
                    }
                }
                if (Input.GetKeyUp(KeyCode.F6))
                {
                    this.Respawn();
                }
                if (Input.GetKeyUp(KeyCode.F7))
                {
                    this.manualRespawn = this.refKnight.transform.position;
                    HeroController.instance.SetHazardRespawn(this.manualRespawn, false);
                    this.addLine("Manual respawn point on this map set to" + this.manualRespawn.ToString());
                }
                if (Input.GetKeyUp(KeyCode.F8))
                {
                    string text = this.refCamera.mode.ToString();
                    if (!this.cameraFollow && text != "FOLLOWING")
                    {
                        this.addLine("Setting Camera Mode to FOLLOW. Previous mode: " + text);
                        this.cameraFollow = true;
                    }
                    else if (this.cameraFollow)
                    {
                        this.cameraFollow = false;
                        this.addLine("Camera Mode is no longer forced");
                    }
                }
                if (Input.GetKeyUp(KeyCode.F9))
                {
                    this.enemyPanel = !this.enemyPanel;
                    if (this.enemyPool.Count < 1 && this.enemyPanel)
                    {
                        this.enemyCheck = false;
                        this.enemyList();
                    }
                }
                if (Input.GetKeyUp(KeyCode.F10))
                {
                    this.selfDamage();
                }
                if (Input.GetKeyUp(KeyCode.Insert))
                {
                    HeroController.instance.vignette.enabled = !HeroController.instance.vignette.enabled;
                }
                if (Input.GetKeyUp(KeyCode.Home))
                {
                    GameObject gameObject = this.refKnight.transform.Find("HeroLight").gameObject;
                    Color color = gameObject.GetComponent<SpriteRenderer>().color;
                    if (color.a != 0f)
                    {
                        color.a = 0f;
                        gameObject.GetComponent<SpriteRenderer>().color = color;
                        this.addLine("Rendering HeroLight invisible...");
                    }
                    else
                    {
                        color.a = 0.7f;
                        gameObject.GetComponent<SpriteRenderer>().color = color;
                        this.addLine("Rendering HeroLight visible...");
                    }
                }
                if (Input.GetKey(KeyCode.LeftControl) && Input.GetKeyUp(KeyCode.Home))
                {
                    this.refKnight.transform.Find("HeroLight").gameObject.SetActive(false);
                    this.addLine("Object HeroLight DISABLED until reload!");
                }
                if (Input.GetKeyUp(KeyCode.Delete))
                {
                    if (GameCameras.instance.hudCanvas.gameObject.activeInHierarchy)
                    {
                        GameCameras.instance.hudCanvas.gameObject.SetActive(false);
                        this.addLine("Disabling HUD...");
                    }
                    else
                    {
                        GameCameras.instance.hudCanvas.gameObject.SetActive(true);
                        this.addLine("Enabling HUD...");
                    }
                }
                if (Input.GetKeyUp(KeyCode.End))
                {
                    GameCameras.instance.tk2dCam.ZoomFactor = 1f;
                    this.addLine("Zoom factor was reset");
                }
                if (Input.GetKeyUp(KeyCode.PageUp))
                {
                    float zoomFactor = GameCameras.instance.tk2dCam.ZoomFactor;
                    GameCameras.instance.tk2dCam.ZoomFactor = zoomFactor + zoomFactor * 0.05f;
                    this.addLine("Zoom level increased to: " + GameCameras.instance.tk2dCam.ZoomFactor);
                }
                if (Input.GetKeyUp(KeyCode.PageDown))
                {
                    float zoomFactor2 = GameCameras.instance.tk2dCam.ZoomFactor;
                    GameCameras.instance.tk2dCam.ZoomFactor = zoomFactor2 - zoomFactor2 * 0.05f;
                    this.addLine("Zoom level decreased to: " + GameCameras.instance.tk2dCam.ZoomFactor);
                }
                if (Input.GetKey(KeyCode.LeftControl) && Input.GetKeyUp(KeyCode.PageUp))
                {
                    float zoomFactor3 = GameCameras.instance.tk2dCam.ZoomFactor;
                    GameCameras.instance.tk2dCam.ZoomFactor = zoomFactor3 + zoomFactor3 * 0.2f;
                    this.addLine("Zoom level increased to: " + GameCameras.instance.tk2dCam.ZoomFactor);
                }
                if (Input.GetKey(KeyCode.LeftControl) && Input.GetKeyUp(KeyCode.PageDown))
                {
                    float zoomFactor4 = GameCameras.instance.tk2dCam.ZoomFactor;
                    GameCameras.instance.tk2dCam.ZoomFactor = zoomFactor4 - zoomFactor4 * 0.2f;
                    this.addLine("Zoom level decreased to: " + GameCameras.instance.tk2dCam.ZoomFactor);
                }
                if (Input.GetKey(KeyCode.LeftShift) && Input.GetKeyUp(KeyCode.PageUp))
                {
                    GameCameras.instance.tk2dCam.ZoomFactor = GameCameras.instance.tk2dCam.ZoomFactor + 0.05f;
                    this.addLine("Zoom level increased to: " + GameCameras.instance.tk2dCam.ZoomFactor);
                }
                if (Input.GetKey(KeyCode.LeftShift) && Input.GetKeyUp(KeyCode.PageDown))
                {
                    GameCameras.instance.tk2dCam.ZoomFactor = GameCameras.instance.tk2dCam.ZoomFactor - 0.05f;
                    this.addLine("Zoom level decreased to: " + GameCameras.instance.tk2dCam.ZoomFactor);
                }
                if (Input.GetKeyUp(KeyCode.Backspace))
                {
                    tk2dSprite component = this.refKnight.GetComponent<tk2dSprite>();
                    Color color2 = component.color;
                    if (color2.a != 0f)
                    {
                        color2.a = 0f;
                        component.color = color2;
                        this.addLine("Rendering Hero sprite invisible...");
                    }
                    else
                    {
                        color2.a = 1f;
                        component.color = color2;
                        this.addLine("Rendering Hero sprite visible...");
                    }
                }
                if (Input.GetKeyUp(KeyCode.KeypadMinus))
                {
                    float timeScale = Time.timeScale;
                    float num3 = timeScale - 0.1f;
                    if (num3 > 0f)
                    {
                        Time.timeScale = num3;
                        this.addLine(string.Concat(new object[]
                        {
                        "New TimeScale value: ",
                        num3,
                        " Old value: ",
                        timeScale
                        }));
                    }
                    else
                    {
                        this.addLine("Cannot set TimeScale equal or lower than 0");
                    }
                }
                if (Input.GetKeyUp(KeyCode.KeypadPlus))
                {
                    float timeScale2 = Time.timeScale;
                    float num4 = timeScale2 + 0.1f;
                    if (num4 < 2f)
                    {
                        Time.timeScale = num4;
                        this.addLine(string.Concat(new object[]
                        {
                        "New TimeScale value: ",
                        num4,
                        " Old value: ",
                        timeScale2
                        }));
                    }
                    else
                    {
                        this.addLine("Cannot set TimeScale greater than 2.0");
                    }
                }
                if (this.cameraFollow && this.refCamera.mode != CameraController.CameraMode.FOLLOWING)
                {
                    this.refCamera.SetMode(CameraController.CameraMode.FOLLOWING);
                }
                if (this.infiniteHP && !HeroController.instance.cState.dead && GameManager.instance.IsGameplayScene() && PlayerData.instance.health < PlayerData.instance.maxHealth)
                {
                    int amount = PlayerData.instance.maxHealth - PlayerData.instance.health;
                    PlayerData.instance.health = PlayerData.instance.maxHealth;
                    HeroController.instance.AddHealth(amount);
                }
                if (this.infiniSOUL && PlayerData.instance.MPCharge < 100 && PlayerData.instance.health > 0 && !HeroController.instance.cState.dead && GameManager.instance.IsGameplayScene())
                {
                    PlayerData.instance.MPCharge = 100;
                }
                if (!this.deathWatchdog && PlayerData.instance.health <= 0 && GameManager.instance.IsGameplayScene())
                {
                    this.deathWatchdog = true;
                    this.addLine(string.Concat(new string[]
                    {
                    "Hero death detected. Game playtime: ",
                    PlayerData.instance.playTime.ToString(),
                    " Shade Zone: ",
                    PlayerData.instance.shadeMapZone.ToString(),
                    " Shade Geo: ",
                    PlayerData.instance.geoPool.ToString(),
                    " Respawn scene: ",
                    PlayerData.instance.respawnScene.ToString()
                    }));
                }
                if (PlayerData.instance.hazardRespawnLocation != this.hazardLocation)
                {
                    this.hazardLocation = PlayerData.instance.hazardRespawnLocation;
                    this.addLine("Hazard Respawn location updated: " + this.hazardLocation.ToString());
                    if (this.showAll && this.enemyPanel)
                    {
                        this.enemyList();
                    }
                }
                if (!string.IsNullOrEmpty(this.respawnSceneWatch) && this.respawnSceneWatch != PlayerData.instance.respawnScene)
                {
                    this.respawnSceneWatch = PlayerData.instance.respawnScene;
                    this.addLine(string.Concat(new string[]
                    {
                    "Save Respawn updated, new scene: ",
                    PlayerData.instance.respawnScene.ToString(),
                    ", Map Zone: ",
                    GameManager.instance.GetCurrentMapZone(),
                    ", Respawn Marker: ",
                    PlayerData.instance.respawnMarkerName.ToString()
                    }));
                }
            }
        }

        // Token: 0x06003146 RID: 12614
        public void DrawRect(Rect position, Color color)
        {
            Color backgroundColor = GUI.backgroundColor;
            GUI.backgroundColor = color;
            GUI.Box(position, GUIContent.none, this.textureStyle);
            GUI.backgroundColor = backgroundColor;
        }

        // Token: 0x06003147 RID: 12615
        public void enemyUpdate(float boxSize)
        {
            if (this.autoUpdate)
            {
                boxSize = 50f;
            }
            if (this.enemyPanel && HeroController.instance != null && !HeroController.instance.cState.transitioning && this.gm.IsGameplayScene())
            {
                int count = this.enemyPool.Count;
                int layerMask = 133120;
                Collider2D[] array = Physics2D.OverlapBoxAll(this.refKnight.transform.position, new Vector2(boxSize, boxSize), 1f, layerMask);
                if (array != null)
                {
                    for (int i = 0; i < array.Length; i++)
                    {
                        PlayMakerFSM playMakerFSM = FSMUtility.LocateFSM(array[i].gameObject, "health_manager_enemy");
                        if (playMakerFSM == null)
                        {
                            FSMUtility.LocateFSM(array[i].gameObject, "health_manager");
                        }
                        if (playMakerFSM && !this.enemyPool.ContainsKey(array[i].gameObject) && !this.enemyIgnore(array[i].gameObject.name))
                        {
                            Component component = array[i].gameObject.GetComponent<tk2dSprite>();
                            if (component == null)
                            {
                                component = null;
                            }
                            int value = playMakerFSM.FsmVariables.GetFsmInt("HP").Value;
                            this.enemyPool.Add(array[i].gameObject, new onData
                            {
                                HP = value,
                                FSM = playMakerFSM,
                                Spr = component
                            });
                        }
                    }
                    if (this.enemyPool.Count > count)
                    {
                        this.addLine("EnemyList updated: +" + (this.enemyPool.Count - count));
                        return;
                    }
                }
            }
            else if (base.IsInvoking("enemyUpdate") && (!this.enemyPanel || !GameManager.instance.IsGameplayScene() || HeroController.instance == null))
            {
                base.CancelInvoke("enemyUpdate");
                this.autoUpdate = false;
                this.addLine("Cancelling enemy auto-scan due to weird conditions");
            }
        }

        // Token: 0x06003148 RID: 12616
        public void enemyDescendants(Transform transform)
        {
            List<Transform> list = new List<Transform>();
            foreach (object obj in transform)
            {
                Transform transform2 = (Transform)obj;
                if ((transform2.gameObject.layer == 11 || transform2.gameObject.layer == 17) && !this.enemyPool.ContainsKey(transform2.gameObject) && !this.enemyIgnore(transform2.gameObject.name))
                {
                    PlayMakerFSM playMakerFSM = FSMUtility.LocateFSM(transform2.gameObject, "health_manager_enemy");
                    if (playMakerFSM == null)
                    {
                        playMakerFSM = FSMUtility.LocateFSM(base.gameObject, "health_manager");
                    }
                    Component component = transform2.gameObject.GetComponent<tk2dSprite>();
                    if (playMakerFSM)
                    {
                        if (component == null)
                        {
                            component = null;
                        }
                        int value = playMakerFSM.FsmVariables.GetFsmInt("HP").Value;
                        this.enemyPool.Add(transform2.gameObject, new onData
                        {
                            HP = value,
                            FSM = playMakerFSM,
                            Spr = component
                        });
                    }
                }
                list.Add(transform2);
            }
            for (int i = 0; i < list.Count; i++)
            {
                if (list[i].childCount > 0)
                {
                    foreach (object obj2 in list[i])
                    {
                        Transform transform3 = (Transform)obj2;
                        if ((transform3.gameObject.layer == 11 || transform3.gameObject.layer == 17) && !this.enemyPool.ContainsKey(transform3.gameObject) && !this.enemyIgnore(transform3.gameObject.name))
                        {
                            PlayMakerFSM playMakerFSM2 = FSMUtility.LocateFSM(transform3.gameObject, "health_manager_enemy");
                            if (playMakerFSM2 == null)
                            {
                                playMakerFSM2 = FSMUtility.LocateFSM(base.gameObject, "health_manager");
                            }
                            Component component2 = transform3.gameObject.GetComponent<tk2dSprite>();
                            if (playMakerFSM2)
                            {
                                if (component2 == null)
                                {
                                    component2 = null;
                                }
                                int value2 = playMakerFSM2.FsmVariables.GetFsmInt("HP").Value;
                                this.enemyPool.Add(transform3.gameObject, new onData
                                {
                                    HP = value2,
                                    FSM = playMakerFSM2,
                                    Spr = component2
                                });
                            }
                        }
                        list.Add(transform3);
                    }
                }
            }
        }

        // Token: 0x06003149 RID: 12617
        public void goReference()
        {
            if (this.refKnight == null)
            {
                this.refKnight = HeroController.instance.gameObject;
            }
            if (this.refKnightSlash == null)
            {
                this.refKnightSlash = this.refKnight.transform.Find("Attacks/Slash").GetComponent<PlayMakerFSM>();
            }
            if (this.refCamera == null)
            {
                this.refCamera = GameObject.Find("tk2dCamera").GetComponent<CameraController>();
            }
            if (this.refDreamNail == null)
            {
                this.refDreamNail = FSMUtility.LocateFSM(this.refKnight, "Dream Nail");
            }
        }

        // Token: 0x0600314A RID: 12618
        public void bossList()
        {
            if (this.bossData == null)
            {
                this.bossData = new Dictionary<string, KeyValuePair<bool, string>>(16);
            }
            if (this.ghostData == null)
            {
                this.ghostData = new Dictionary<string, string>(7);
            }
            this.bossData.Clear();
            this.ghostData.Clear();
            this.bossData.Add("Ruins2_03", new KeyValuePair<bool, string>(true, "Battle Control"));
            this.bossData.Add("Crossroads_09", new KeyValuePair<bool, string>(true, "Battle Scene"));
            this.bossData.Add("Crossroads_04", new KeyValuePair<bool, string>(true, "Battle Scene"));
            this.bossData.Add("Fungus1_04", new KeyValuePair<bool, string>(false, "hornet1Defeated"));
            this.bossData.Add("Crossroads_10", new KeyValuePair<bool, string>(true, "Battle Scene"));
            this.bossData.Add("Fungus3_archive_02", new KeyValuePair<bool, string>(false, "defeatedMegaJelly"));
            this.bossData.Add("Fungus2_15", new KeyValuePair<bool, string>(false, "defeatedMantisLords"));
            this.bossData.Add("Waterways_12", new KeyValuePair<bool, string>(false, "flukeMotherDefeated"));
            this.bossData.Add("Waterways_05", new KeyValuePair<bool, string>(false, "defeatedDungDefender"));
            this.bossData.Add("Ruins1_24", new KeyValuePair<bool, string>(false, "mageLordDefeated"));
            this.bossData.Add("Deepnest_32", new KeyValuePair<bool, string>(true, "Battle Scene"));
            this.bossData.Add("Mines_18", new KeyValuePair<bool, string>(true, "Battle Scene"));
            this.bossData.Add("Mines_32", new KeyValuePair<bool, string>(true, "Battle Scene"));
            this.bossData.Add("Fungus3_23", new KeyValuePair<bool, string>(true, "Battle Scene"));
            this.bossData.Add("Ruins2_11", new KeyValuePair<bool, string>(true, "Battle Scene"));
            this.bossData.Add("Deepnest_East_Hornet", new KeyValuePair<bool, string>(false, "hornetOutskirtsDefeated"));
            this.ghostData.Add("RestingGrounds_02", "xeroDefeated");
            this.ghostData.Add("Fungus1_35", "noEyesDefeated");
            this.ghostData.Add("Fungus2_32", "elderHuDefeated");
            this.ghostData.Add("Deepnest_East_10", "markothDefeated");
            this.ghostData.Add("Deepnest_40", "galienDefeated");
            this.ghostData.Add("Fungus3_40", "mumCaterpillarDefeated");
            this.ghostData.Add("Cliffs_02", "aladarSlugDefeated");
        }

        // Token: 0x0600314B RID: 12619
        public bool enemyIgnore(string name)
        {
            int num6 = name.IndexOf("Hornet Barb", StringComparison.OrdinalIgnoreCase);
            int num2 = name.IndexOf("Needle Tink", StringComparison.OrdinalIgnoreCase);
            int num3 = name.IndexOf("worm", StringComparison.OrdinalIgnoreCase);
            int num4 = name.IndexOf("Laser Turret", StringComparison.OrdinalIgnoreCase);
            int num5 = name.IndexOf("Deep Spikes", StringComparison.OrdinalIgnoreCase);
            return num6 >= 0 || num2 >= 0 || num3 == 0 || num4 >= 0 || num5 >= 0;
        }

        // Token: 0x0600314C RID: 12620
        public void writeDGdata()
        {
            if (this.DGData != null)
            {
                if (File.Exists("dreamgate.dat"))
                {
                    try
                    {
                        File.Delete("dreamgate.dat");
                    }
                    catch (Exception arg)
                    {
                        Debug.LogError("[DebugMod::DGata] Unable to delete existing dreamgate.dat " + arg);
                        this.addLine("[DebugMod::DGata] Unable to delete existing dreamgate.dat " + arg);
                        return;
                    }
                }
                int num = 0;
                this.DGdataBusy = true;
                foreach (KeyValuePair<string, KeyValuePair<string, float[]>> keyValuePair in this.DGData)
                {
                    File.AppendAllText("dreamgate.dat", string.Concat(new object[]
                    {
                    keyValuePair.Key,
                    "|",
                    keyValuePair.Value.Key,
                    "|",
                    keyValuePair.Value.Value[0],
                    "-",
                    keyValuePair.Value.Value[1],
                    Environment.NewLine
                    }));
                    num++;
                }
                this.DGdataBusy = false;
                if (File.Exists("dreamgate.dat"))
                {
                    this.addLine("DGdata written sucessfully, entries written: " + num.ToString());
                }
            }
        }

        // Token: 0x0600314D RID: 12621
        public void readDGdata(bool update)
        {
            if (File.Exists("dreamgate.dat"))
            {
                this.DGdataBusy = true;
                if (this.DGData == null)
                {
                    this.DGData = new Dictionary<string, KeyValuePair<string, float[]>>();
                }
                if (!update)
                {
                    this.DGData.Clear();
                }
                string[] array = File.ReadAllLines("dreamgate.dat");
                if (array == null || array.Length == 0)
                {
                    this.addLine("Unable to read content of dreamgate.dat properly, file is empty?");
                    Debug.Log("Unable to read content of dreamgate.dat properly, file is empty?");
                    this.DGdataBusy = false;
                    return;
                }
                for (int i = 0; i < array.Length; i++)
                {
                    int num = array[i].Length - array[i].Replace("|", "").Length;
                    if (!string.IsNullOrEmpty(array[i]) && array[i].Length < 500 && array[i].Length > 17 && num == 2)
                    {
                        string[] array2 = array[i].Split(new char[]
                        {
                        '|'
                        });
                        if (!string.IsNullOrEmpty(array2[0]) && !string.IsNullOrEmpty(array2[1]) && !string.IsNullOrEmpty(array2[2]))
                        {
                            string key = array2[0];
                            float num2 = 0f;
                            float num3 = 0f;
                            string[] array3 = array2[2].Split(new char[]
                            {
                            '-'
                            });
                            if (array3.Length == 2)
                            {
                                try
                                {
                                    num2 = float.Parse(array3[0], CultureInfo.InvariantCulture);
                                    num3 = float.Parse(array3[1], CultureInfo.InvariantCulture);
                                }
                                catch (FormatException)
                                {
                                    Debug.Log("DGdata::FormatException - incorrect float format");
                                    this.addLine("DGdata::FormatException - incorrect float format");
                                    this.DGdataBusy = false;
                                    return;
                                }
                                catch (OverflowException)
                                {
                                    Debug.Log("DGdata::OverflowException - incorrect float format");
                                    this.addLine("DGdata::OverflowException - incorrect float format");
                                    this.DGdataBusy = false;
                                    return;
                                }
                            }
                            if (num2 != 0f && num3 != 0f && !this.DGData.ContainsKey(key))
                            {
                                this.DGData.Add(key, new KeyValuePair<string, float[]>(array2[1], new float[]
                                {
                                num2,
                                num3
                                }));
                            }
                        }
                    }
                }
                this.DGdataBusy = false;
                if (this.DGData.Count > 0)
                {
                    this.addLine("Filled DGdata: " + this.DGData.Count);
                    Debug.Log("Filled DGdata: " + this.DGData.Count);
                    return;
                }
            }
            else
            {
                this.addLine("File dreamgate.dat not found!");
                Debug.Log("File dreamgate.dat not found!");
            }
        }

        // Token: 0x0600314E RID: 12622
        public IEnumerator Fade()
        {
            this.GUIalpha = 1f;
            while (this.GUIalpha > 0f)
            {
                this.GUIalpha -= Time.deltaTime * 0.3f;
                yield return null;
            }
            this.GUIstring = "";
            yield break;
            yield break;
        }

        // Token: 0x04003922 RID: 14626
        public const float textWidth = 100f;

        // Token: 0x04003923 RID: 14627
        public GameManager gm;

        // Token: 0x04003924 RID: 14628
        public InputHandler ih;

        // Token: 0x04003925 RID: 14629
        public float unloadTime;

        // Token: 0x04003926 RID: 14630
        public float loadTime;

        // Token: 0x04003927 RID: 14631
        public Vector3 hazardLocation;

        // Token: 0x04003928 RID: 14632
        public Vector3 scale;

        // Token: 0x04003929 RID: 14633
        public string[] fileList;

        // Token: 0x0400392A RID: 14634
        public int selGridInt;

        // Token: 0x0400392B RID: 14635
        public bool listReady;

        // Token: 0x0400392C RID: 14636
        public string[] copyList;

        // Token: 0x0400392D RID: 14637
        public bool showAll;

        // Token: 0x0400392E RID: 14638
        public bool showPanel;

        // Token: 0x0400392F RID: 14639
        public bool showConsole;

        // Token: 0x04003930 RID: 14640
        public bool showButtons;

        // Token: 0x04003931 RID: 14641
        public Vector2 SMscroll;

        // Token: 0x04003932 RID: 14642
        public Vector2 consoleScroll;

        // Token: 0x04003933 RID: 14643
        public bool infiniSOUL;

        // Token: 0x04003934 RID: 14644
        public bool deathWatchdog;

        // Token: 0x04003935 RID: 14645
        public Vector3 manualRespawn;

        // Token: 0x04003936 RID: 14646
        public bool cameraFollow;

        // Token: 0x04003937 RID: 14647
        public bool enemyPanel;

        // Token: 0x04003938 RID: 14648
        public int hpLimit;

        // Token: 0x04003939 RID: 14649
        public bool infiniteHP;

        // Token: 0x0400393A RID: 14650
        public string modVersion;

        // Token: 0x0400393B RID: 14651
        public float originalWidth;

        // Token: 0x0400393C RID: 14652
        public float originalHeight;

        // Token: 0x0400393D RID: 14653
        public bool attachHP;

        // Token: 0x0400393E RID: 14654
        public string respawnSceneWatch;

        // Token: 0x0400393F RID: 14655
        public List<string> consoleHist;

        // Token: 0x04003940 RID: 14656
        public Texture2D backgroundTexture;

        // Token: 0x04003941 RID: 14657
        public GUIStyle textureStyle;

        // Token: 0x04003942 RID: 14658
        public bool showHelp;

        // Token: 0x04003943 RID: 14659
        public bool skillSub;

        // Token: 0x04003944 RID: 14660
        public Vector2 enemyScroll;

        // Token: 0x04003945 RID: 14661
        public bool enemyCheck;

        // Token: 0x04003946 RID: 14662
        public bool autoUpdate;

        // Token: 0x04003947 RID: 14663
        public bool charmSub;

        // Token: 0x04003948 RID: 14664
        public bool itemSub;

        // Token: 0x04003949 RID: 14665
        public bool bossSub;

        // Token: 0x0400394A RID: 14666
        public bool showBox;

        // Token: 0x0400394B RID: 14667
        public Dictionary<GameObject, onData> enemyPool;

        // Token: 0x0400394C RID: 14668
        public GameObject refKnight;

        // Token: 0x0400394D RID: 14669
        public PlayMakerFSM refKnightSlash;

        // Token: 0x0400394E RID: 14670
        public CameraController refCamera;

        // Token: 0x0400394F RID: 14671
        public bool bossFound;

        // Token: 0x04003950 RID: 14672
        public Dictionary<string, KeyValuePair<bool, string>> bossData;

        // Token: 0x04003951 RID: 14673
        public Dictionary<string, string> ghostData;

        // Token: 0x04003952 RID: 14674
        public bool ghostFound;

        // Token: 0x04003953 RID: 14675
        public Dictionary<string, KeyValuePair<string, float[]>> DGData;

        // Token: 0x04003954 RID: 14676
        public bool DGsub;

        // Token: 0x04003955 RID: 14677
        public bool DGdataBusy;

        // Token: 0x04003956 RID: 14678
        public bool DGadd;

        // Token: 0x04003957 RID: 14679
        public string DGentry;

        // Token: 0x04003958 RID: 14680
        public bool DGdel;

        // Token: 0x04003959 RID: 14681
        public List<GameObject> tempEData;

        // Token: 0x0400395A RID: 14682
        public float GUIalpha;

        // Token: 0x0400395B RID: 14683
        public string GUIstring;

        // Token: 0x0400395C RID: 14684
        public int showPanelState;

        // Token: 0x0400395D RID: 14685
        public PlayMakerFSM refDreamNail;
    }

    [OnGameInit]

    public class ParticleSwitch : MonoBehaviour
        {
            private bool Status;

            void Start()
            {
                Status = true;
            }

            void Update()
            {
                if (Input.GetKey(KeyCode.LeftBracket))
                {
                    if (Status)
                    {
                        foreach (ParticleSystem ps in FindObjectsOfType<ParticleSystem>())
                        {
                            ps.Stop();
                            ps.Clear();
                        }
                        Status = false;
                    }
                    else
                    {
                        foreach (ParticleSystem ps in FindObjectsOfType<ParticleSystem>())
                        {
                            ps.Play();
                        }
                        Status = true;
                    }
                }
            }
        }
}